{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "Sellix Developers API V1 endpoints",
      "url": "https://dev.sellix.io/v1"
    }
  ],
  "info": {
    "description": "Sellix public API for developers to access merchant resources",
    "version": "1.0.0",
    "title": "Sellix Developers API",
    "x-logo": {
      "url": "https://sellix.io/cdn-cgi/image/q=65/https://cdn.sellix.io/static/logo/sellix-logo-black-smaller.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Sellix logo",
      "href": "https://sellix.io"
    }
  },
  "tags": [
    {
      "name": "Blacklists",
      "description": "Blacklist endpoints"
    },
    {
      "name": "Whitelists",
      "description": "Whitelist endpoints"
    },
    {
      "name": "Categories",
      "description": "Category endpoints"
    },
    {
      "name": "Coupons",
      "description": "Coupon endpoints"
    },
    {
      "name": "Feedback",
      "description": "Feedback endpoints"
    },
    {
      "name": "Orders",
      "description": "Order endpoints (also known as invoices)"
    },
    {
      "name": "Products",
      "description": "Product endpoints"
    },
    {
      "name": "Queries",
      "description": "Query endpoints"
    },
    {
      "name": "Payments",
      "description": "Payment endpoints"
    },
    {
      "name": "Customers",
      "description": "Customer endpoints"
    },
    {
      "name": "Subscriptions",
      "description": "Subscription endpoints"
    },
    {
      "name": "Licenses",
      "description": "License endpoints"
    },
    {
      "name": "Information",
      "description": "Informative endpoints"
    }
  ],
  "paths": {
    "/blacklists": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "listBlacklists",
        "description": "List all the blacklists created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklistListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "createBlacklist",
        "description": "Create a blacklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "requestBody": {
          "description": "blacklist JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Blocking unwanted email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklistCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/blacklists/{uniqid}": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "getBlacklist",
        "description": "Get a specific blacklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklist"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "deleteBlacklist",
        "description": "Delete a blacklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklistDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "updateBlacklist",
        "description": "Update a blacklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "blacklist JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Blocking unwanted email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklistUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/whitelists": {
      "get": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "listWhitelists",
        "description": "List all the whitelists created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelistListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "createWhitelist",
        "description": "Create a whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "requestBody": {
          "description": "whitelist JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Admitting known email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelistCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/whitelists/{uniqid}": {
      "get": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "getWhitelist",
        "description": "Get a specific whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelist"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "deleteWhitelist",
        "description": "Delete a whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelistDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "updateWhitelist",
        "description": "Update a whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "whitelist JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Admitting known email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelistUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "listCategories",
        "description": "List all the categories created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/categoryListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "operationId": "createCategory",
        "description": "Create a category",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "requestBody": {
          "description": "category JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  },
                  "groups_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f42ada2b38a5"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/categoryCreated"
          },
          "400": {
            "$ref": "#/components/responses/invalidTitleError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/categories/{uniqid}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "getCategory",
        "description": "Get a specific category",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/category"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "operationId": "deleteCategory",
        "description": "Delete a category",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/categoryDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "operationId": "updateCategory",
        "description": "Update a category",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "category JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  },
                  "groups_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f42ada2b38a5"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/categoryUpdated"
          },
          "400": {
            "$ref": "#/components/responses/invalidTitleError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/coupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "operationId": "listCoupons",
        "description": "List all the coupons created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/couponListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Coupons"
        ],
        "operationId": "createCoupon",
        "description": "Create a coupon",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "requestBody": {
          "description": "coupon JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "discount_value"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "BLACK_FRIDAY"
                  },
                  "discount_value": {
                    "type": "integer",
                    "example": 35
                  },
                  "max_uses": {
                    "type": "integer",
                    "example": 50
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE",
                      "FIXED"
                    ],
                    "example": "PERCENTAGE"
                  },
                  "disabled_with_volume_discounts": {
                    "type": "boolean",
                    "example": true
                  },
                  "all_recurring_bill_invoices": {
                    "type": "boolean",
                    "example": false
                  },
                  "expire_at": {
                    "type": "number",
                    "example": 4070937600
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/couponCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },  
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/coupons/{uniqid}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "operationId": "getCoupon",
        "description": "Get a specific coupon",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/coupon"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "operationId": "deleteCoupon",
        "description": "Delete a coupon",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/couponDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "operationId": "updateCoupon",
        "description": "Update a coupon",
        "requestBody": {
          "description": "coupon JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "BLACK_FRIDAY"
                  },
                  "discount_value": {
                    "type": "integer",
                    "example": 35
                  },
                  "max_uses": {
                    "type": "integer",
                    "example": 50
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE",
                      "FIXED"
                    ],
                    "example": "PERCENTAGE"
                  },
                  "disabled_with_volume_discounts": {
                    "type": "boolean",
                    "example": true
                  },
                  "all_recurring_bill_invoices": {
                    "type": "boolean",
                    "example": false
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/couponUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/feedback": {
      "get": {
        "tags": [
          "Feedback"
        ],
        "operationId": "listFeedback",
        "description": "List the feedback received on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/feedbackListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/feedback/{uniqid}": {
      "get": {
        "tags": [
          "Feedback"
        ],
        "operationId": "getFeedback",
        "description": "Get a specific feedback",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/feedback"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/feedback/reply/{uniqid}": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "operationId": "replyFeedback",
        "description": "Reply to a feedback",
        "requestBody": {
          "description": "JSON that contains the reply",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reply"
                ],
                "properties": {
                  "reply": {
                    "type": "string",
                    "example": "This is a feedback reply"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/feedbackReply"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "listGroups",
        "description": "List all the groups created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "operationId": "createGroup",
        "description": "Create a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "requestBody": {
          "description": "group JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupCreated"
          },
          "400": {
            "$ref": "#/components/responses/invalidTitleError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/groups/{uniqid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "getGroup",
        "description": "Get a specific group",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/group"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "operationId": "deleteGroups",
        "description": "Delete a groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "operationId": "updateGroup",
        "description": "Update a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "group JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample...."
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupUpdated"
          },
          "400": {
            "$ref": "#/components/responses/invalidTitleError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "listOrders",
        "description": "List all the orders created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "example": 25,
            "description": "The number of resources to include in a page"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "required": false,
            "example": "created_at:ASC,type:ASC",
            "description": "How to sort the resources in the response"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "required": false,
            "example": "status:COMPLETED,type:PRODUCT",
            "description": "Which requirements to apply to returned resources"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "required": false,
            "example": "support@sellix.io",
            "description": "A specific value to search the response for"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoiceListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/orders/{uniqid}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrder",
        "description": "Get a specific order",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/orders/replacement/{uniqid}": {
      "post": {
        "tags": [
          "Orders"
        ],
        "operationId": "replaceOrder",
        "description": "Issue a replacement for a specific order",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoiceReplaced"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/orders/update/{uniqid}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "operationId": "updateOrder",
        "description": "Update information for a specific order",
        "requestBody": {
          "description": "order information to be updated in JSON format",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gateway": {
                    "$ref": "#/components/schemas/gateway",
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page. If product_id is specified, the gateway must be on in the product's gateways array"
                  },
                  "paypal_apm": {
                    "type": "string",
                    "enum": [
                      "bancontact",
                      "eps",
                      "trustly",
                      "mercado",
                      "paylater",
                      "sepa",
                      "venmo",
                      "blik",
                      "giropay",
                      "ideal",
                      "mybank",
                      "sofort",
                      "przelewy24",
                      "credit"
                    ],
                    "example": null,
                    "description": "If gateway is PAYPAL, a paypal_apm (PayPal Alternative Payment Method) can be specified. To retrieve the available PayPal APM for a specific customer session, please refer to the PayPal SDK using window.paypal.FUNDING and fundingSource to filter out available methods. You can also use our documentation on how to process white_label payments"
                  },
                  "name": {
                    "type": "string",
                    "example": "Sellix",
                    "description": "The name of the recipient for the order"
                  },
                  "surname": {
                    "type": "string",
                    "example": "SRL",
                    "description": "The surname of the recipient for the order"
                  },
                  "address_line1": {
                    "type": "string",
                    "example": "Via del Monte 1",
                    "description": "The address line of the the order"
                  },
                  "address_city": {
                    "type": "string",
                    "example": "Bologna",
                    "description": "The city the address is located in"
                  },
                  "address_country": {
                    "type": "string",
                    "example": "IT",
                    "description": "The ISO country code country the address is located in"
                  },
                  "address_postal_code": {
                    "type": "string",
                    "example": "40126",
                    "description": "The zipcode for the address"
                  },
                  "address_state": {
                    "type": "string",
                    "example": "BO",
                    "description": "The state the address is located"
                  },
                  "stripe_apm": {
                    "type": "string",
                    "enum": [
                      "afterpay_clearpay",
                      "alipay",
                      "bancontact",
                      "au_becs_debit",
                      "boleto",
                      "eps",
                      "fpx",
                      "giropay",
                      "grabpay",
                      "ideal",
                      "klarna",
                      "oxxo",
                      "p24",
                      "sofort",
                      "wechat_pay"
                    ],
                    "example": null,
                    "description": "Stripe Alternative Payment Method name, such as iDEAL, used if gateway is STRIPE"
                  }
                }
              }
            }
          }
        },        
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoiceUpdated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/orders/{uniqid}/custom_fields": {
      "put": {
        "tags": [
          "Orders"
        ],
        "operationId": "updateOrderCustomFields",
        "description": "Update custom_field information for a specific order",
        "requestBody": {
          "description": "order information to be updated in JSON format",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": [
                      {
                        "name": "custom_field_name",
                        "value": "custom_field_value"
                      }
                    ]
                  }
                
                }
              }
            }
          }
        },        
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "listProducts",
        "description": "List all the products created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/productListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "operationId": "createProduct",
        "description": "Create a product",
        "requestBody": {
          "description": "product JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "price",
                  "description",
                  "type"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software Activation Keys"
                  },
                  "slug": {
                    "type": "string",
                    "example": "product-slug"
                  },
                  "price": {
                    "type": "number",
                    "format": "double",
                    "example": 12.5
                  },
                  "description": {
                    "type": "string",
                    "example": "Product description example"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "gateways": {
                    "$ref": "#/components/schemas/gateways"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "INFO_CARD",
                      "SERVICE",
                      "DYNAMIC",
                      "FILE",
                      "SERIALS",
                      "GAMING_RCON",
                      "SUBSCRIPTION",
                      "SUBSCRIPTION_V2"
                    ],
                    "example": "SERIALS",
                    "description": "Product type"
                  },
                  "serials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "activation-key-#1"
                    ]
                  },
                  "serials_remove_duplicates": {
                    "type": "boolean",
                    "example": true
                  },
                  "service_text": {
                    "type": "string",
                    "example": null
                  },
                  "stock": {
                    "type": "integer",
                    "example": null
                  },
                  "dynamic_webhook": {
                    "type": "string",
                    "example": null
                  },
                  "stock_delimiter": {
                    "type": "string",
                    "example": ","
                  },
                  "min_quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "max_quantity": {
                    "type": "integer",
                    "example": 150
                  },
                  "delivery_text": {
                    "type": "string",
                    "example": "Thank you for the purchase!"
                  },
                  "custom_fields": {
                    "type": "array",
                    "description": "key-value pairs for custom metadata to be included in the invoice throughout its lifetime",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "crypto_confirmations_needed": {
                    "type": "integer",
                    "example": 3
                  },
                  "max_risk_level": {
                    "type": "integer",
                    "example": 85,
                    "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "private": {
                    "type": "boolean",
                    "example": false
                  },
                  "block_vpn_proxies": {
                    "type": "boolean",
                    "example": true,
                    "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": null
                  },
                  "on_hold": {
                    "type": "boolean",
                    "example": false
                  },
                  "terms_of_service": {
                    "type": "string",
                    "example": "ToS to be agreed upon purchase"
                  },
                  "warranty": {
                    "type": "integer",
                    "example": 86400,
                    "description": "The length of the warranty in seconds"
                  },
                  "warranty_text": {
                    "type": "string",
                    "example": "Warranty description"
                  },
                  "remove_image": {
                    "type": "boolean",
                    "example": false
                  },
                  "remove_file": {
                    "type": "boolean",
                    "example": false
                  },
                  "volume_discounts": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "recurring_interval": {
                    "type": "string",
                    "example": null
                  },
                  "recurring_interval_count": {
                    "type": "integer",
                    "example": null
                  },
                  "trial_period": {
                    "type": "integer",
                    "example": null
                  },
                  "product_plans": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/product_plan_request"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/productCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/products?img=true": {
      "post": {
        "tags": [
          "Products"
        ],
        "operationId": "createProductImage",
        "description": "Create a product with an image",
        "requestBody": {
          "description": "product JSON to be created",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["image"],
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload with the product"
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "title",
                      "price",
                      "description",
                      "type"
                    ],
                    "properties": {
                      "title": {
                        "type": "string",
                        "example": "Software Activation Keys"
                      },
                      "slug": {
                        "type": "string",
                        "example": "product-slug"
                      },
                      "price": {
                        "type": "number",
                        "format": "double",
                        "example": 12.5
                      },
                      "description": {
                        "type": "string",
                        "example": "Product description example"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      },
                      "gateways": {
                        "$ref": "#/components/schemas/gateways"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "INFO_CARD",
                          "SERVICE",
                          "DYNAMIC",
                          "FILE",
                          "SERIALS",
                          "GAMING_RCON",
                          "SUBSCRIPTION",
                          "SUBSCRIPTION_V2"
                        ],
                        "example": "SERIALS",
                        "description": "Product type"
                      },
                      "serials": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "activation-key-#1"
                        ]
                      },
                      "serials_remove_duplicates": {
                        "type": "boolean",
                        "example": true
                      },
                      "service_text": {
                        "type": "string",
                        "example": null
                      },
                      "stock": {
                        "type": "integer",
                        "example": null
                      },
                      "dynamic_webhook": {
                        "type": "string",
                        "example": null
                      },
                      "stock_delimiter": {
                        "type": "string",
                        "example": ","
                      },
                      "min_quantity": {
                        "type": "integer",
                        "example": 1
                      },
                      "max_quantity": {
                        "type": "integer",
                        "example": 150
                      },
                      "delivery_text": {
                        "type": "string",
                        "example": "Thank you for the purchase!"
                      },
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "example": null
                      },
                      "crypto_confirmations_needed": {
                        "type": "integer",
                        "example": 3
                      },
                      "max_risk_level": {
                        "type": "integer",
                        "example": 85,
                        "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
                      },
                      "unlisted": {
                        "type": "boolean",
                        "example": false
                      },
                      "private": {
                        "type": "boolean",
                        "example": false
                      },
                      "block_vpn_proxies": {
                        "type": "boolean",
                        "example": true,
                        "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
                      },
                      "sort_priority": {
                        "type": "integer",
                        "example": 0
                      },
                      "webhooks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": null
                      },
                      "on_hold": {
                        "type": "boolean",
                        "example": false
                      },
                      "terms_of_service": {
                        "type": "string",
                        "example": "ToS to be agreed upon purchase"
                      },
                      "warranty": {
                        "type": "integer",
                        "example": 86400,
                        "description": "The length of the warranty in seconds"
                      },
                      "warranty_text": {
                        "type": "string",
                        "example": "Warranty description"
                      },
                      "remove_image": {
                        "type": "boolean",
                        "example": false
                      },
                      "remove_file": {
                        "type": "boolean",
                        "example": false
                      },
                      "volume_discounts": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "example": null
                      },
                      "recurring_interval": {
                        "type": "string",
                        "example": null
                      },
                      "recurring_interval_count": {
                        "type": "integer",
                        "example": null
                      },
                      "trial_period": {
                        "type": "integer",
                        "example": null
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/productCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/products/{uniqid}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "getProduct",
        "description": "Get a specific product",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/product"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "deleteProduct",
        "description": "Delete a product",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/productDeleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "updateProduct",
        "description": "Update a product",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "product JSON to be updated",
          "required": true, 
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software Activation Keys"
                  },
                  "slug": {
                    "type": "string",
                    "example": "product-slug"
                  },
                  "price": {
                    "type": "number",
                    "format": "double",
                    "example": 12.5
                  },
                  "description": {
                    "type": "string",
                    "example": "Product description example"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "gateways": {
                    "$ref": "#/components/schemas/gateways"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "INFO_CARD",
                      "SERVICE",
                      "DYNAMIC",
                      "FILE",
                      "SERIALS",
                      "GAMING_RCON",
                      "SUBSCRIPTION",
                      "SUBSCRIPTION_V2"
                    ],
                    "example": "SERIALS",
                    "description": "Product type"
                  },
                  "serials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "activation-key-#1"
                    ]
                  },
                  "serials_remove_duplicates": {
                    "type": "boolean",
                    "example": true
                  },
                  "service_text": {
                    "type": "string",
                    "example": null
                  },
                  "stock": {
                    "type": "integer",
                    "example": null
                  },
                  "dynamic_webhook": {
                    "type": "string",
                    "example": null
                  },
                  "stock_delimiter": {
                    "type": "string",
                    "example": ","
                  },
                  "min_quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "max_quantity": {
                    "type": "integer",
                    "example": 150
                  },
                  "delivery_text": {
                    "type": "string",
                    "example": "Thank you for the purchase!"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "crypto_confirmations_needed": {
                    "type": "integer",
                    "example": 3
                  },
                  "max_risk_level": {
                    "type": "integer",
                    "example": 85,
                    "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "private": {
                    "type": "boolean",
                    "example": false
                  },
                  "block_vpn_proxies": {
                    "type": "boolean",
                    "example": true,
                    "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": null
                  },
                  "on_hold": {
                    "type": "boolean",
                    "example": false
                  },
                  "terms_of_service": {
                    "type": "string",
                    "example": "ToS to be agreed upon purchase"
                  },
                  "warranty": {
                    "type": "integer",
                    "example": 86400,
                    "description": "The length of the warranty in seconds"
                  },
                  "warranty_text": {
                    "type": "string",
                    "example": "Warranty description"
                  },
                  "remove_image": {
                    "type": "boolean",
                    "example": false
                  },
                  "remove_file": {
                    "type": "boolean",
                    "example": false
                  },
                  "volume_discounts": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "recurring_interval": {
                    "type": "string",
                    "example": null
                  },
                  "recurring_interval_count": {
                    "type": "integer",
                    "example": null
                  },
                  "trial_period": {
                    "type": "integer",
                    "example": null
                  },
                  "product_plans": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/product_plan_request"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/productUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/products/{uniqid}?img=true": {
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "updateProductImage",
        "description": "Update a product",
        "requestBody": {
          "description": "product JSON to be created",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["image"],
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload with the product"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "example": "Software Activation Keys"
                      },
                      "slug": {
                        "type": "string",
                        "example": "product-slug"
                      },
                      "price": {
                        "type": "number",
                        "format": "double",
                        "example": 12.5
                      },
                      "description": {
                        "type": "string",
                        "example": "Product description example"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      },
                      "gateways": {
                        "$ref": "#/components/schemas/gateways"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "INFO_CARD",
                          "SERVICE",
                          "DYNAMIC",
                          "FILE",
                          "SERIALS",
                          "GAMING_RCON",
                          "SUBSCRIPTION",
                          "SUBSCRIPTION_V2"
                        ],
                        "example": "SERIALS",
                        "description": "Product type"
                      },
                      "serials": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "activation-key-#1"
                        ]
                      },
                      "serials_remove_duplicates": {
                        "type": "boolean",
                        "example": true
                      },
                      "service_text": {
                        "type": "string",
                        "example": null
                      },
                      "stock": {
                        "type": "integer",
                        "example": null
                      },
                      "dynamic_webhook": {
                        "type": "string",
                        "example": null
                      },
                      "stock_delimiter": {
                        "type": "string",
                        "example": ","
                      },
                      "min_quantity": {
                        "type": "integer",
                        "example": 1
                      },
                      "max_quantity": {
                        "type": "integer",
                        "example": 150
                      },
                      "delivery_text": {
                        "type": "string",
                        "example": "Thank you for the purchase!"
                      },
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "example": null
                      },
                      "crypto_confirmations_needed": {
                        "type": "integer",
                        "example": 3
                      },
                      "max_risk_level": {
                        "type": "integer",
                        "example": 85,
                        "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
                      },
                      "unlisted": {
                        "type": "boolean",
                        "example": false
                      },
                      "private": {
                        "type": "boolean",
                        "example": false
                      },
                      "block_vpn_proxies": {
                        "type": "boolean",
                        "example": true,
                        "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
                      },
                      "sort_priority": {
                        "type": "integer",
                        "example": 0
                      },
                      "webhooks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": null
                      },
                      "on_hold": {
                        "type": "boolean",
                        "example": false
                      },
                      "terms_of_service": {
                        "type": "string",
                        "example": "ToS to be agreed upon purchase"
                      },
                      "warranty": {
                        "type": "integer",
                        "example": 86400,
                        "description": "The length of the warranty in seconds"
                      },
                      "warranty_text": {
                        "type": "string",
                        "example": "Warranty description"
                      },
                      "remove_image": {
                        "type": "boolean",
                        "example": false
                      },
                      "remove_file": {
                        "type": "boolean",
                        "example": false
                      },
                      "volume_discounts": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "example": null
                      },
                      "recurring_interval": {
                        "type": "string",
                        "example": null
                      },
                      "recurring_interval_count": {
                        "type": "integer",
                        "example": null
                      },
                      "trial_period": {
                        "type": "integer",
                        "example": null
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/productUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/queries": {
      "get": {
        "tags": [
          "Queries"
        ],
        "operationId": "listQueries",
        "description": "List all the queries created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/queries/{uniqid}": {
      "get": {
        "tags": [
          "Queries"
        ],
        "operationId": "getQuery",
        "description": "Get a specific query",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/query"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries/reply/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "replyQuery",
        "description": "Add a reply to a query",
        "requestBody": {
          "description": "JSON that contains the reply",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reply"
                ],
                "properties": {
                  "reply": {
                    "type": "string",
                    "example": "This is a query reply"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryReply"
          },
          "400": {
            "$ref": "#/components/responses/queryReplyError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/queries/close/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "closeQuery",
        "description": "Close a query",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryClose"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/queries/reopen/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "reopenQuery",
        "description": "Reopen a closed query",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryReopen"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "operationId": "createPayment",
        "description": "Create a payment",
        "requestBody": {
          "description": "payment JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "white_label"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Sellix Payment",
                    "description": "Required if product_id and cart are null. Defines the title of the purchase, can be the digital good's name or a brief summary of what the customer is paying for"
                  },
                  "product_id": {
                    "type": "string",
                    "example": "sample....",
                    "description": "If specified value, currency and custom_fields will be taken from the product details"
                  },
                  "product_plans": {
                    "type": "object",
                    "example": {"sample....": "pp_622886e03cbf6a40d5d1f0"},
                    "description": "Required for subscriptions 2.0. Specified which plan to use for the invoice"
                  },
                  "product_variants": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {"sample....": "sample...."},
                    "description": "Key should be productId. Value should be the variant uniqid"
                  },
                  "cart": {
                    "type": "object",
                    "required": [
                      "Products"
                    ],
                    "properties": {
                      "products": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "uniqid",
                            "unit_quantity"
                          ],
                          "properties": {
                            "uniqid": {
                              "type": "string",
                              "format": "uuid",
                              "example": "sample....",
                              "description": "Unique ID of the product"
                            },
                            "unit_quantity": {
                              "type": "integer",
                              "example": 4,
                              "description": "Quantity of the product uniqid passed"
                            }
                          }
                        }
                      }
                    },
                    "description": "Other than product_id, a cart object can be specified if multiple products need to be purchased through the API",
                    "example": null
                  },
                  "gateway": {
                    "$ref": "#/components/schemas/gateway",
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page. If product_id is specified, the gateway must be on in the product's gateways array"
                  },
                  "gateways": {
                    "$ref": "#/components/schemas/gateways"
                  },
                  "paypal_apm": {
                    "type": "string",
                    "enum": [
                      "bancontact",
                      "eps",
                      "trustly",
                      "mercado",
                      "paylater",
                      "sepa",
                      "venmo",
                      "blik",
                      "giropay",
                      "ideal",
                      "mybank",
                      "sofort",
                      "przelewy24",
                      "credit"
                    ],
                    "example": null,
                    "description": "If gateway is PAYPAL, a paypal_apm (PayPal Alternative Payment Method) can be specified. To retrieve the available PayPal APM for a specific customer session, please refer to the PayPal SDK using window.paypal.FUNDING and fundingSource to filter out available methods. You can also use our documentation on how to process white_label payments"
                  },
                  "credit_card": {
                    "type": "boolean",
                    "example": null,
                    "description": "If gateway is PAYPAL and no paypal_apm is passed, specify credit_card true to land the customer on the PayPal managed credit card page instead of the onboarding login"
                  },
                  "lex_payment_method": {
                    "type": "string",
                    "description": "DEPRECATED: If gateway is LEX_HOLDINGS_GROUP, method to be used for the customer to pay",
                    "deprecated": true
                  },
                  "value": {
                    "type": "number",
                    "format": "double",
                    "example": 1.5,
                    "description": "Required if product_id and cart are null. The customer will be asked to pay for this amount"
                  },
                  "currency": {
                    "type": "string",
                    "enum": [
                      "CAD",
                      "HKD",
                      "ISK",
                      "PHP",
                      "DKK",
                      "HUF",
                      "CZK",
                      "GBP",
                      "RON",
                      "SEK",
                      "IDR",
                      "INR",
                      "BRL",
                      "RUB",
                      "HRK",
                      "JPY",
                      "THB",
                      "CHF",
                      "EUR",
                      "MYR",
                      "BGN",
                      "TRY",
                      "CNY",
                      "NOK",
                      "NZD",
                      "ZAR",
                      "USD",
                      "MXN",
                      "SGD",
                      "AUD",
                      "ILS",
                      "KRW",
                      "PLN"
                    ],
                    "example": "EUR",
                    "description": "Required if product_id and cart are null, defines the currency of value"
                  },
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 5,
                    "description": "Can be passed with either product_id null or not. The value or product's price will be multiplied by this amount"
                  },
                  "coupon_code": {
                    "type": "string",
                    "example": "CHRISTMAS",
                    "description": "Pass a Sellix coupon code to apply a discount over the invoice"
                  },
                  "confirmations": {
                    "type": "integer",
                    "example": 1,
                    "description": "Cryptocurrency confirmations required to count a transaction over the total crypto amount needed"
                  },
                  "email": {
                    "type": "string",
                    "example": "customer@gmail.com",
                    "description": "Email of the customer. Should you want to handle emails on your own, pass to this field a company email to which PDF receipts of orders will be sent for accounting and log purposes"
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/custom_fields_object"
                  },
                  "fraud_shield": {
                    "type": "object",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "example": "255.255.255.255",
                        "description": "Customer IP"
                      },
                      "user_agent": {
                        "type": "string",
                        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0",
                        "description": "Customer user agent"
                      },
                      "user_language": {
                        "type": "string",
                        "example": "en-GB,fr-FR;q=0.5",
                        "description": "Customer user language"
                      },
                      "maximum_fraud_score": {
                        "type": "integer",
                        "example": "85",
                        "description": "The maximum fraud score a customer can have for the payment to be processed. Between 0 and 100, if set to 100 all fraud checks will be skipped and the invoice will be created"
                      }
                    },
                    "description": "Customer details to be used by our fraud shield in order to score potential fraud attempts"
                  },
                  "tax_data": {
                    "type": "object",
                    "properties": {
                      "country_code": {
                        "type": "string",
                        "example": "US",
                        "description": "2 character country ISO code"
                      },
                      "vat_number": {
                        "type": "string",
                        "example": null,
                        "description": "The VAT number for your business"
                      },
                      "sdi_code": {
                        "type": "string",
                        "example": null,
                        "description": "Only for businesses registered in Italy"
                      },
                      "type": {
                        "type": "string",
                        "enum": ["PERSON", "BUSINESS"],
                        "example": "PERSON",
                        "description": "Whether you are registered as a business or person"
                      },
                      "name": {
                        "type": "string",
                        "example": "First Name",
                        "description": "The first name of the storefront owner"
                      },
                      "surname": {
                        "type": "string",
                        "example": "Last Name",
                        "description": "The last name of the storefront owner"
                      },
                      "city": {
                        "type": "string",
                        "example": "New York City",
                        "description": "The name of the city you are registered in"
                      },
                      "postcode": {
                        "type": "string",
                        "example": "10001",
                        "description": "The postal code for your business"
                      },
                      "address": {
                        "type": "string",
                        "example": "1234 FakeAddress St",
                        "description": "The address of your business"
                      }
                    }
                  },
                  "webhook": {
                    "type": "string",
                    "example": "https://webhook.sellix.io/api/v1/example",
                    "description": "Webhook URL to which updates regarding this payment (invoice) will be sent"
                  },
                  "white_label": {
                    "type": "boolean",
                    "example": false,
                    "description": "Whether or not you want to handle the payments UI. If false, return_url must be specified as it is the website where we will redirect the customer once he has paid through our platform. If true, we will return a full invoice object in the response for you to handle. You can receive updates over invoices and handle subsequent logics through our webhooks"
                  },
                  "return_url": {
                    "type": "string",
                    "example": "https://sample.sellix.io/return"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/payment"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/payments/{uniqid}": {
      "delete": {
        "tags": [
          "Payments"
        ],
        "operationId": "voidPayment",
        "description": "Void a payment",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paymentVoided"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "operationId": "completePayment",
        "description": "Flag an invoice as paid and process it, sending the purchased product to the customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paymentCompleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "listCustomers",
        "description": "List all the customers created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "operationId": "createCustomer",
        "description": "Create a customer",
        "requestBody": {
          "description": "customer JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "name",
                  "surname"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "sample@gmail.com",
                    "description": "Customer email"
                  },
                  "name": {
                    "type": "string",
                    "example": "James",
                    "description": "Customer name"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Smith",
                    "description": "Customer surname"
                  },
                  "phone": {
                    "type": "string",
                    "example": 3287261000,
                    "description": "Customer phone"
                  },
                  "phone_country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer phone country code"
                  },
                  "country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer country code"
                  },
                  "street_address": {
                    "type": "string",
                    "example": "St. Rome 404",
                    "description": "Customer street address"
                  },
                  "additional_address_info": {
                    "type": "string",
                    "example": null,
                    "description": "Customer street address additional info"
                  },
                  "city": {
                    "type": "string",
                    "example": "Rome",
                    "description": "Customer city"
                  },
                  "postal_code": {
                    "type": "string",
                    "example": 987,
                    "description": "Customer postal code"
                  },
                  "state": {
                    "type": "string",
                    "example": "Italy",
                    "description": "Customer state"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerCreated"
          },
          "400": {
            "$ref": "#/components/responses/customerCreateError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/customers/{id_or_email}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "getCustomer",
        "description": "Get a specific customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/id_or_email"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/customer"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "operationId": "updateCustomer",
        "description": "Update a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/id_or_email"
          }
        ],
        "requestBody": {
          "description": "customer JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "sample@gmail.com",
                    "description": "Customer email"
                  },
                  "name": {
                    "type": "string",
                    "example": "James",
                    "description": "Customer name"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Smith",
                    "description": "Customer surname"
                  },
                  "phone": {
                    "type": "string",
                    "example": 3287261000,
                    "description": "Customer phone"
                  },
                  "phone_country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer phone country code"
                  },
                  "country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer country code"
                  },
                  "street_address": {
                    "type": "string",
                    "example": "St. Rome 404",
                    "description": "Customer street address"
                  },
                  "additional_address_info": {
                    "type": "string",
                    "example": null,
                    "description": "Customer street address additional info"
                  },
                  "city": {
                    "type": "string",
                    "example": "Rome",
                    "description": "Customer city"
                  },
                  "postal_code": {
                    "type": "string",
                    "example": 987,
                    "description": "Customer postal code"
                  },
                  "state": {
                    "type": "string",
                    "example": "Italy",
                    "description": "Customer state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerUpdated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/customers/{id_or_email}/affiliate_balance": {
      "post": {
        "tags": [
          "Customers"
        ],
        "operationId": "customerAffiliateBalance",
        "description": "Update a customer affiliate balance",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/id_or_email"
          }
        ],
        "requestBody": {
          "description": "JSON describing adjustments to affiliate balance",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "example": "SET",
                    "enum": ["SET", "ADD", "SUBTRACT"],
                    "description": "How the amount should be applied to the customer"
                  },
                  "amount": {
                    "type": "number",
                    "example": 10,
                    "description": "The amount the action should apply to the customer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "resource updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "example": null
                    },
                    "error": {
                      "type": "string",
                      "example": null
                    },
                    "message": {
                      "type": "string",
                      "example": "Customer affiliate balance updated"
                    },
                    "env": {
                      "type": "string",
                      "example": "production"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/customers/{id_or_email}/payment_methods": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "getCustomerPaymentMethods",
        "description": "Get a customer's payment methods on file",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/id_or_email"
          }
        ],
        "responses": {
          "200": {
            "description": "resource updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "payment_methods": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/payment_method"
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": null
                    },
                    "message": {
                      "type": "string",
                      "example": null
                    },
                    "env": {
                      "type": "string",
                      "example": "production"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "listSubscriptions",
        "description": "List all the subscriptions created on the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/version"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptions"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "createSubscriptionToCustomer",
        "description": "Create a subscription invoice to a customer",
        "requestBody": {
          "description": "subscription creation JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "customer_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "ID of the subscription product",
                    "example": "5eb6b2bde8a50"
                  },
                  "coupon_code": {
                    "type": "string",
                    "description": "Coupon code for this subscription",
                    "example": null
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/custom_fields_object"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "ID of the store customer",
                    "example": "cst_...."
                  },
                  "gateway": {
                    "$ref": "#/components/schemas/gateway",
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionInvoiceCreated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/subscriptions/{uniqid}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getSubscription",
        "description": "Get a specific subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscription"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "deleteSubscription",
        "description": "Cancel a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paymentVoided"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/subscriptions_v2": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "listSubscriptionv2",
        "description": "List the subscriptions on a specific store",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listsubscriptionsV2"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions 2.0"
        ],
        "operationId": "createSubscriptionv2",
        "description": "Create a subscription invoice to a customer",
        "requestBody": {
          "description": "subscription creation JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "product_id",
                  "quantity",
                  "product_plan_id"
                ],
                "properties": {
                  "gateway": {
                    "$ref": "#/components/schemas/gateway",
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page"
                  },
                  "email": {
                    "type": "string",
                    "example": "customer.email@gmail.com",
                    "description": "The customer's email address. Invoices and subscription updates will be sent to this email"
                  },
                  "currency": {
                    "type": "string",
                    "example": "USD",
                    "description": "The currency to display prices in. If not specified, the shop's default currency will be used"
                  },
                  "tax_data": {
                    "type": "object",
                    "properties": {
                      "country_code": {
                        "type": "string",
                        "example": "US",
                        "description": "The two letter ISO country code for your country. This is used to determine the correct tax rate to apply to the subscription"
                      },
                      "city": {
                        "type": "string",
                        "example": "New York",
                        "description": "The city your business is located in. This is used to determine the correct tax rate to apply to the subscription"
                      }
                    }
                  },
                  "product_id": {
                    "type": "string",
                    "example": "sample....",
                    "description": "The unique ID of the product to create a subscription for"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 1,
                    "description": "The quantity of the product to subscribe to. If not specified, the default quantity of the product will be used"
                  },
                  "product_plan_id": {
                    "type": "string",
                    "example": "pp_1aed3fb1583653f925c260",
                    "description": "The id of the product plan to subscribe to"
                  },
                  "product_addons": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {"sample....": "sample....,sample...."},
                    "description": "Key should be productId. Value should be a string of comma separated addon ids"
                  },
                  "coupon_code": {
                    "type": "string",
                    "example": "CHRISTMAS",
                    "description": "The coupon code to apply to the subscription"
                  },
                  "custom_fields": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionV2Response"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/subscriptions_v2/{uniqid}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getSubscriptionv2",
        "description": "Get a specific subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionV2"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions 2.0"
        ],
        "operationId": "deleteSubscriptionv2",
        "description": "Cancel a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          },
          {
            "in": "query",
            "name": "cancel_reason_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "example": 1,
            "description": "The id of the cancel reason"
          },
          {
            "in": "query",
            "name": "cancel_reason_comment",
            "schema": {
              "type": "string"
            },
            "required": false,
            "example": "The subscription was too expensive!",
            "description": "Text comment for the cancellation. This field should be Base64 encoded before sending"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionV2Response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions 2.0"
        ],
        "operationId": "updateSubscriptionv2",
        "description": "Update a subscription",
        "requestBody": {
          "description": "subscription update JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gateway": {
                    "$ref": "#/components/schemas/gateway",
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page"
                  },
                  "payment_method_uniqid": {
                    "type": "string",
                    "example": "pm_....",
                    "description": "The unique id of the customer's payment method to set for this endpoint"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          },
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionV2Response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/dicts/subscription_cancel_reasons": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "listSubscriptionCancelReasons",
        "description": "List the optional reasons a customer can select to cancel a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listSubscriptionCancelReasons"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/products/licensing/hardware_id": {
      "put": {
        "tags": [
          "Licenses"
        ],
        "operationId": "updateHardwareId",
        "description": "Assign an hardware ID to a license",
        "requestBody": {
          "description": "product licensing assign hardware ID JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "key",
                  "hardware_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "Uniqid of the license product",
                    "example": "5eb6b2bde8a50"
                  },
                  "key": {
                    "type": "string",
                    "description": "License key purchase by the customer",
                    "example": "LICENSE-SAMPLE-00"
                  },
                  "hardware_id": {
                    "type": "string",
                    "description": "Hardware ID to be assigned to the license",
                    "example": "098H52ST479QE053V2"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/license"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/products/licensing/check": {
      "post": {
        "tags": [
          "Licenses"
        ],
        "operationId": "checkLicense",
        "description": "Checks the validity of a license key and its hardware ID",
        "requestBody": {
          "description": "product licensing assign hardware ID JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "key"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "Uniqid of the license product",
                    "example": "5eb6b2bde8a50"
                  },
                  "key": {
                    "type": "string",
                    "description": "License key purchase by the customer",
                    "example": "LICENSE-SAMPLE-00"
                  },
                  "hardware_id": {
                    "type": "string",
                    "description": "Hardware ID to be assigned to the license. If passed, the hardware ID will be checked against the license key",
                    "example": "098H52ST479QE053V2"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/license"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/self": {
      "get": {
        "tags": [
          "Information"
        ],
        "operationId": "getSelf",
        "description": "Get information about the current shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchant"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/shop"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "aml_wallet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 987,
            "description": "AML transaction ID"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "Shop ID linked to this AML transaction"
          },
          "invoice_id": {
            "type": "string",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice this AML transaction is linked to"
          },
          "origin": {
            "type": "string",
            "example": "INVOICE",
            "description": "Origin of the AML transaction"
          },
          "type": {
            "type": "string",
            "example": "WALLET",
            "description": "Type of the AML transaction"
          },
          "asset": {
            "type": "string",
            "example": "holistic",
            "description": "Asset of the AML transaction"
          },
          "blockchain": {
            "type": "string",
            "example": "holistic",
            "description": "Blockchain of the AML transaction"
          },
          "hash": {
            "type": "string",
            "example": "bc1qvkwfapml56vvweuvvp7tqvurv2w52asv38u5l3",
            "description": "AML transaction hash"
          },
          "output_type": {
            "type": "string",
            "example": null,
            "description": "AML transaction output type"
          },
          "output_address": {
            "type": "string",
            "example": null,
            "description": "AML transaction output address"
          },
          "risk_score": {
            "type": "string",
            "example": "0.156921",
            "description": "AML transaction risk score"
          },
          "asset_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "BTC/bitcoin"
            ],
            "description": "AML transaction asset list"
          },
          "error": {
            "type": "string",
            "example": null,
            "description": "AML transaction error"
          },
          "evaluation_detail": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rule_id": {
                        "type": "string",
                        "example": "2a380f72-2dcd-4b90-9467-d3c7b6d25dfb",
                        "description": "Rule ID"
                      },
                      "rule_name": {
                        "type": "string",
                        "example": "Sanctioned, TF & CSAM",
                        "description": "Rule name"
                      },
                      "risk_score": {
                        "type": "number",
                        "format": "double",
                        "example": 0.014195487896676929,
                        "description": "Risk score"
                      },
                      "matched_elements": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": {
                              "type": "string",
                              "example": "OFAC Sanctioned Entity",
                              "description": "Category"
                            },
                            "contributions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "entity": {
                                    "type": "string",
                                    "example": "Lazarus Group Harmony Horizon Bridge Exploit - June 2022 (suspected post-Exchange)",
                                    "description": "Entity"
                                  },
                                  "risk_triggers": {
                                    "type": "object",
                                    "properties": {
                                      "country": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "category": {
                                        "type": "string",
                                        "example": "OFAC Sanctioned Entity",
                                        "description": "Category"
                                      },
                                      "category_id": {
                                        "type": "string",
                                        "example": "8d39eacf-a5c0-4b38-a101-6b3120b84bf9",
                                        "description": "Category ID"
                                      },
                                      "is_sanctioned": {
                                        "type": "boolean",
                                        "example": true,
                                        "description": "Is sanctioned"
                                      }
                                    }
                                  },
                                  "contribution_value": {
                                    "type": "object",
                                    "properties": {
                                      "usd": {
                                        "type": "number",
                                        "format": "double",
                                        "example": 15.554924625314328,
                                        "description": "Contribution value in USD"
                                      }
                                    }
                                  },
                                  "contribution_percentage": {
                                    "type": "number",
                                    "format": "double",
                                    "example": 0.09531445633497328,
                                    "description": "Contribution percentage"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "contributions": {
            "type": "object",
            "properties": {
              "source": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Unknown",
                            "description": "Entity name"
                          },
                          "is_vasp": {
                            "type": "boolean",
                            "example": null,
                            "description": "Is a VASP"
                          },
                          "actor_id": {
                            "type": "integer",
                            "example": -4,
                            "description": "Actor ID"
                          },
                          "category": {
                            "type": "string",
                            "example": "Unknown",
                            "description": "Entity category"
                          },
                          "is_primary_entity": {
                            "type": "boolean",
                            "example": true,
                            "description": "Is the primary entity"
                          }
                        }
                      }
                    },
                    "contribution_value": {
                      "type": "object",
                      "properties": {
                        "usd": {
                          "type": "number",
                          "format": "double",
                          "example": 8842.310699142721,
                          "description": "Contribution value in USD"
                        }
                      }
                    },
                    "contribution_percentage": {
                      "type": "number",
                      "format": "double",
                      "example": 54.1822,
                      "description": "Contribution percentage"
                    }
                  }
                }
              },
              "destination": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Kraken",
                            "description": "Entity name"
                          },
                          "is_vasp": {
                            "type": "boolean",
                            "example": true,
                            "description": "Is a VASP"
                          },
                          "actor_id": {
                            "type": "integer",
                            "example": 23,
                            "description": "Actor ID"
                          },
                          "category": {
                            "type": "string",
                            "example": "Exchange",
                            "description": "Entity category"
                          },
                          "is_primary_entity": {
                            "type": "boolean",
                            "example": true,
                            "description": "Is the primary entity"
                          }
                        }
                      }
                    },
                    "contribution_value": {
                      "type": "object",
                      "properties": {
                        "usd": {
                          "type": "number",
                          "format": "double",
                          "example": 14645.819876,
                          "description": "Contribution value in USD"
                        }
                      }
                    },
                    "contribution_percentage": {
                      "type": "number",
                      "format": "double",
                      "example": 100,
                      "description": "Contribution percentage"
                    }
                  }
                }
              }
            }
          },
          "blockchain_info": {
            "type": "object",
            "properties": {
              "cluster": {
                "type": "object",
                "properties": {
                  "inflow_value": {
                    "type": "object",
                    "properties": {
                      "usd": {
                        "type": "number",
                        "format": "double",
                        "example": 16319.573922305124,
                        "description": "Inflow value in USD"
                      }
                    }
                  },
                  "outflow_value": {
                    "type": "object",
                    "properties": {
                      "usd": {
                        "type": "number",
                        "format": "double",
                        "example": 14645.819876,
                        "description": "Inflow value in USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "cluster_entities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Unknown",
                  "description": "Entity name"
                },
                "is_vasp": {
                  "type": "boolean",
                  "example": null,
                  "description": "Is a VASP"
                },
                "actor_id": {
                  "type": "integer",
                  "example": -4,
                  "description": "Actor ID"
                },
                "category": {
                  "type": "string",
                  "example": "Unknown",
                  "description": "Entity category"
                },
                "is_primary_entity": {
                  "type": "boolean",
                  "example": true,
                  "description": "Is the primary entity"
                },
                "is_after_sanction_date": {
                  "type": "boolean",
                  "example": false,
                  "description": "Is after the sanction date"
                }
              }
            }
          },
          "risk_score_detail": {
            "type": "object",
            "properties": {
              "source": {
                "type": "number",
                "format": "double",
                "example": 0.15692119477282407,
                "description": "Source risk score"
              },
              "destination": {
                "type": "number",
                "format": "double",
                "example": 0.15692119477282407,
                "description": "Destination risk score"
              }
            }
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the AML transaction creation date"
          }
        }
      },
      "approved_address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "address": {
            "type": "string",
            "example": "btcsda312dsad34132dsa",
            "description": "The crypto address that was approved"
          },
          "coin": {
            "type": "string",
            "example": "BTC",
            "description": "The coin of the approved address"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "tx": {
            "type": "string",
            "example": "txid",
            "description": "The transaction ID of the approval"
          },
          "recurring_billing_id": {
            "type": "string",
            "example": "rec_....",
            "description": "The recurring billing ID of the approval"
          },
          "allowance": {
            "type": "number",
            "example": 0.0001,
            "description": "The allowance of the approved address"
          },
          "updated_at": {
            "type": "integer",
            "example": 162857125819,
            "description": "Timestamp, available if the approved address has been updated"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp, available if the approved address has been created"
          }
        }
      },
      "blacklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "scope": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "SHARED"
            ],
            "example": "PRIVATE",
            "description": "Whether it is a PRIVATE or SHARED blacklist. SHARED blacklists are created by Sellix's Fraud Shield to be used across Business and Enterprise merchants"
          },
          "scope_details": {
            "type": "object",
            "example": null
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this blacklist belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IP",
              "COUNTRY",
              "ISP",
              "ASN",
              "HOST"
            ],
            "example": "EMAIL",
            "description": "The type of data of this blacklist"
          },
          "data": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "The value of the blacklist"
          },
          "note": {
            "type": "string",
            "example": "Blocking unwanted email",
            "description": "Additional note provided on blacklist creation"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the blacklist"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 987,
            "description": "User ID of the user who updated the blaclist"
          }
        }
      },
      "blockchain": {
        "type": "string",
        "enum": [
          "ERC20",
          "BEP20",
          "TRC20",
          "MATIC",
          "SOL"
        ],
        "example": null,
        "description": "The blockchain of the crypto currency"
      },
      "bundle_config": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the bundle, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 1,
            "description": "The shop ID to which this bundle belongs"
          },
          "title": {
            "type": "string",
            "example": "sampleTitle",
            "description": "The title of the bundle"
          },
          "products": {
            "type": "string",
            "example": "PRODUCT_ID_1,PRODUCT_ID_2,PRODUCT_ID_3",
            "description": "The product IDs of the products in the bundle"
          },
          "discount_type": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ],
            "example": "PERCENTAGE",
            "description": "The type of discount applied to the bundle"
          },
          "discount_amount": {
            "type": "number",
            "example": 25,
            "description": "The amount of the discount applied to the bundle"
          },
          "updated_at": {
            "type": "number",
            "example": 162857125819,
            "description": "Timestamp, available if the bundle has been updated"
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this category belongs"
          },
          "title": {
            "type": "string",
            "example": "Software",
            "description": "Title of the category"
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the category is visible on the merchant storefront"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this category"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the category"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the category has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 987,
            "description": "User ID of the user who updated the category"
          },
          "products_bound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryProduct"
            },
            "description": "Array of products. Please note that the product object contains limited fields, to get the full product object please use the Products API endpoint"
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "How many products are present in the products_bound array"
          },
          "groups_bound": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uniqid": {
                  "type": "string",
                  "format": "uuid",
                  "example": "sample....",
                  "description": "Unique ID of the resource, used as reference across the API"
                },
                "title": {
                  "type": "string",
                  "example": "Digital goods to download",
                  "description": "Group title"
                },
                "image_attachment": {
                  "type": "string",
                  "example": "sample......",
                  "description": "DEPRECATED: Unique id of the image attachment for this product"
                },
                "created_at": {
                  "type": "integer",
                  "format": "timestamp",
                  "example": 162857125819,
                  "description": "Timestamp for the creation of the group"
                },
                "updated_at": {
                  "type": "integer",
                  "format": "timestamp",
                  "example": 162857125819,
                  "description": "Date, available if the group has been edited"
                },
                "group_id": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The unique identifyer of the current group"
                },
                "category_id": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The category the group is a part of"
                }
              }
            },
            "description": "Array of groups"
          },
          "groups_count": {
            "type": "integer",
            "example": 1,
            "description": "How many groups are present in the groups_bound array"
          }
        }
      },
      "categoryProduct": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": "5",
            "description": "Product price"
          },
          "price_display": {
            "type": "number",
            "format": "double",
            "example": "4.5",
            "description": "Product price in currency"
          },
          "price_discount": {
            "type": "number",
            "example": 0,
            "description": "The discount price on the purchased goods"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "unlisted": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether the product is listed on the storefront"
          },
          "title": {
            "type": "string",
            "example": "Sellix Product",
            "description": "The product title"
          },
          "image_attachment": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED: Unique id of the image attachment for this product"
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "Product description"
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product"
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product"
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SUBSCRIPTION",
            "description": "Product type"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this resource belongs"
          },
          "gateways": {
            "$ref": "#/components/schemas/gateways"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted"
          },
          "private": {
            "type": "boolean",
            "example": false,
            "description": "If private is true, the product is hidden on the storefront and cannot be bought with a direct link"
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product"
          },
          "on_hold": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether the product cannot be bought but is shown in the storefront"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1731571560,
            "description": "Timestamp for the creation of the product"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1731893694,
            "description": "Date, available if the product has been edited"
          },
          "image_name": {
            "type": "string",
            "example": "SellixImageName.png",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "category_id": {
            "type": "string",
            "example": "sample29asample....0e39d",
            "description": "The category the product is a part of"
          },
          "product_id": {
            "type": "string",
            "example": "sample....",
            "description": "The id of the current product"
          }
        }
      },
      "cloudflare_image_id": {
        "type": "string",
        "example": "sample-....",
        "description": "The cloudflare image ID of this product, replaces image_attachment and image_name. Format https://imagedelivery.net/95QNzrEeP7RU5l5WdbyrKw/<cloudflare_image_id>/<variant_name> where variant_name can be shopItem, avatar, icon, imageAvatarFeedback, public, productImageCart"
      },
      "coupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this coupon belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Coupon type, whether it's for a product or subscription. SUBSCRIPTION coupons are only for Sellix-own subscriptions, this field will always return PRODUCT"
          },
          "coupon_type": {
            "type": "string",
            "enum": [
              "CLASSIC"
            ],
            "example": "CLASSIC"
          },
          "code": {
            "type": "string",
            "example": "CHRISTMAS25",
            "description": "Coupon code to be used during the checkout phase"
          },
          "stripe_promo_id": {
            "type": "string",
            "example": null,
            "description": "The stripe ID for the promotion"
          },
          "stripe_coupon_id": {
            "type": "string",
            "example": null,
            "description": "The stripe ID for the coupon"
          },
          "use_type": {
            "type": "string",
            "enum": [
              "LIMITED",
              "ANY"
            ],
            "example": "LIMITED",
            "description": "If LIMITED, an array of products must be specified as this coupon will be used only with them"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 25,
            "description": "Discount value for this coupon"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the coupon discount value",
            "example": "EUR"
          },
          "used": {
            "type": "integer",
            "example": 15,
            "description": "How many times this coupon has been used"
          },
          "disabled_with_volume_discounts": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not this coupon is valid if a volume discount is applied"
          },
          "all_recurring_bill_invoices": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not this coupon should be applied for each product SUBSCRIPTION renewal"
          },
          "max_uses": {
            "type": "integer",
            "example": 25,
            "description": "Maximum usage for this coupon"
          },
          "smart_contract_address": {
            "type": "string",
            "example": null,
            "description": "The smart contract address for the coupon"
          },
          "token_id": {
            "type": "string",
            "example": null,
            "description": "The token ID for the coupon"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "expire_at": {
            "type": "string",
            "description": "The datetime object corresponding to the expiration time of the coupon",
            "example": "1975-02-28 00:00:00"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the coupon"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the category has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the coupon"
          },
          "products_bound": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of product uniqids. Differs from the categories API as this endpoint does not need specific details about a product. Use the products API to get details about a single product",
            "example": [
              "sample...."
            ]
          },
          "products_bound_extended": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uniqid": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The uniqid of the product"
                },
                "title": {
                  "type": "string",
                  "example": "Sample Product",
                  "description": "The title of the product"
                },
                "price": {
                  "type": "string",
                  "example": "1.00",
                  "description": "The price of the product"
                },
                "price_display": {
                  "type": "string",
                  "example": "1.00",
                  "description": "The price of the product that is displayed (includes fees or discounts)"
                },
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "slug": {
                  "type": "string",
                  "example": "sample-product",
                  "description": "The slug of the product"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "INFO_CARD",
                    "SERVICE",
                    "DYNAMIC",
                    "FILE",
                    "SERIALS",
                    "GAMING_RCON",
                    "SUBSCRIPTION",
                    "SUBSCRIPTION_V2"
                  ],
                  "example": "SERVICE",
                  "description": "Product type"
                }
              }
            },
            "description": "Details about the products in the products_bound field"
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "How many products are present in the products_bound array"
          }
        }
      },
      "couponListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this coupon belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Coupon type, whether it's for a product or subscription. SUBSCRIPTION coupons are only for Sellix-own subscriptions, this field will always return PRODUCT"
          },
          "coupon_type": {
            "type": "string",
            "enum": [
              "CLASSIC"
            ],
            "example": "CLASSIC"
          },
          "code": {
            "type": "string",
            "example": "CHRISTMAS25",
            "description": "Coupon code to be used during the checkout phase"
          },
          "stripe_promo_id": {
            "type": "string",
            "example": null,
            "description": "The stripe ID for the promotion"
          },
          "stripe_coupon_id": {
            "type": "string",
            "example": null,
            "description": "The stripe ID for the coupon"
          },
          "use_type": {
            "type": "string",
            "enum": [
              "LIMITED",
              "ANY"
            ],
            "example": "LIMITED",
            "description": "If LIMITED, an array of products must be specified as this coupon will be used only with them"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 25,
            "description": "Discount value for this coupon"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the coupon discount value",
            "example": "EUR"
          },
          "used": {
            "type": "integer",
            "example": 15,
            "description": "How many times this coupon has been used"
          },
          "disabled_with_volume_discounts": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not this coupon is valid if a volume discount is applied"
          },
          "all_recurring_bill_invoices": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not this coupon should be applied for each product SUBSCRIPTION renewal"
          },
          "max_uses": {
            "type": "integer",
            "example": 25,
            "description": "Maximum usage for this coupon"
          },
          "smart_contract_address": {
            "type": "string",
            "example": null,
            "description": "The smart contract address for the coupon"
          },
          "token_id": {
            "type": "string",
            "example": null,
            "description": "The token ID for the coupon"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "expire_at": {
            "type": "string",
            "description": "The datetime object corresponding to the expiration time of the coupon",
            "example": "1975-02-28 00:00:00"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the coupon"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the category has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the coupon"
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "How many products are present in the products_bound array"
          }
        }
      },
      "crypto_transaction": {
        "type": "object",
        "properties": {
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Crypto amount sent in the transaction"
          },
          "hash": {
            "type": "string",
            "example": "234dB62Q3X9nyqussRSHW5x9rXe7NzyS3hLcwSTtzd9WLWfrHFUtX4KS6DAMyyHnvRgUNiqUvZdw2T9XWJqa8sPW",
            "description": "Crypto transaction hash"
          },
          "confirmations": {
            "type": "integer",
            "example": 1,
            "description": "Crypto transaction confirmations, not updated once the invoice status is COMPLETED or VOIDED"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the crypto transaction reception date"
          },
          "updated_at": {
            "type": "integer",
            "example": 1640673134,
            "description": "Crypto transaction update date"
          },
          "aml_tx": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 987,
                "description": "AML transaction ID"
              },
              "shop_id": {
                "type": "integer",
                "example": 987,
                "description": "Shop ID linked to this AML transaction"
              },
              "invoice_id": {
                "type": "string",
                "example": "1c7fa9-a277075d5d-6d8431",
                "description": "Unique ID of the invoice this AML transaction is linked to"
              },
              "origin": {
                "type": "string",
                "example": "INVOICE",
                "description": "Origin of the AML transaction"
              },
              "type": {
                "type": "string",
                "example": "TRANSACTION",
                "description": "Type of the AML transaction"
              },
              "asset": {
                "type": "string",
                "example": "holistic",
                "description": "Asset of the AML transaction"
              },
              "blockchain": {
                "type": "string",
                "example": "holistic",
                "description": "Blockchain of the AML transaction"
              },
              "hash": {
                "type": "string",
                "example": "df6693ca6fe386993ff8496fa297df1f2fcd8ce65bd45468dd1539f16d949ee7",
                "description": "AML transaction hash"
              },
              "output_type": {
                "type": "string",
                "example": "address",
                "description": "AML transaction output type"
              },
              "output_address": {
                "type": "string",
                "example": "bc1q5k8c3w7js7s56mhremysa7mv9ufsr59eers9ad",
                "description": "AML transaction output address"
              },
              "risk_score": {
                "type": "string",
                "example": "0.270000",
                "description": "AML transaction risk score"
              },
              "asset_list": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "BTC/bitcoin"
                ],
                "description": "AML transaction asset list"
              },
              "error": {
                "type": "string",
                "example": null,
                "description": "AML transaction error"
              },
              "evaluation_detail": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [],
                "description": "AML transaction evaluation detail"
              },
              "contributions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Coinbase",
                            "description": "Entity name"
                          },
                          "is_vasp": {
                            "type": "boolean",
                            "example": true,
                            "description": "Is a VASP"
                          },
                          "actor_id": {
                            "type": "integer",
                            "example": 30,
                            "description": "Actor ID"
                          },
                          "category": {
                            "type": "string",
                            "example": "Exchange",
                            "description": "Entity category"
                          },
                          "is_primary_entity": {
                            "type": "boolean",
                            "example": true,
                            "description": "Is the primary entity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "blockchain_info": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "has_sent": {
                        "type": "boolean",
                        "example": true,
                        "description": "Has sent"
                      },
                      "has_received": {
                        "type": "boolean",
                        "example": true,
                        "description": "Has received"
                      }
                    }
                  },
                  "transaction": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "type": "string",
                        "example": "1975-02-28T22:05:25Z",
                        "description": "Transaction time"
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "usd": {
                            "type": "number",
                            "format": "double",
                            "example": 806.035089,
                            "description": "Transaction value in USD"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "cluster_entities": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Unknown",
                      "description": "Entity name"
                    },
                    "is_vasp": {
                      "type": "boolean",
                      "example": null,
                      "description": "Is a VASP"
                    },
                    "actor_id": {
                      "type": "integer",
                      "example": -4,
                      "description": "Actor ID"
                    },
                    "category": {
                      "type": "string",
                      "example": "Unknown",
                      "description": "Entity category"
                    },
                    "is_primary_entity": {
                      "type": "boolean",
                      "example": true,
                      "description": "Is the primary entity"
                    },
                    "is_after_sanction_date": {
                      "type": "boolean",
                      "example": false,
                      "description": "Is after the sanction date"
                    }
                  }
                }
              },
              "risk_score_detail": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "number",
                    "format": "double",
                    "example": 0.15692119477282407,
                    "description": "Source risk score"
                  },
                  "destination": {
                    "type": "number",
                    "format": "double",
                    "example": 0.15692119477282407,
                    "description": "Destination risk score"
                  }
                }
              },
              "created_at": {
                "type": "integer",
                "format": "timestamp",
                "example": 162857125819,
                "description": "Timestamp for the AML transaction creation date"
              }
            }
          }
        }
      },
      "currency": {
        "type": "string",
        "enum": [
          "CAD",
          "HKD",
          "ISK",
          "PHP",
          "DKK",
          "HUF",
          "CZK",
          "GBP",
          "RON",
          "SEK",
          "IDR",
          "INR",
          "BRL",
          "RUB",
          "HRK",
          "JPY",
          "THB",
          "CHF",
          "EUR",
          "MYR",
          "BGN",
          "TRY",
          "CNY",
          "NOK",
          "NZD",
          "ZAR",
          "USD",
          "MXN",
          "SGD",
          "AUD",
          "ILS",
          "KRW",
          "PLN"
        ],
        "example": "EUR",
        "description": "Available currency"
      },
      "custom_fields_array": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text",
                "hidden",
                "number",
                "largetextbox",
                "checkbox"
              ],
              "example": "checkbox",
              "description": "Type of the custom field"
            },
            "name": {
              "type": "string",
              "example": "Read the ToS",
              "description": "Custom field name displayed to the customer"
            },
            "regex": {
              "type": "string",
              "example": null,
              "description": "Regex that the custom field value must match"
            },
            "placeholder": {
              "type": "string",
              "example": null,
              "description": "Placeholder for the custom field input"
            },
            "default": {
              "type": "string",
              "example": null,
              "description": "Default value if the customer leaves the input empty"
            },
            "required": {
              "type": "boolean",
              "example": false,
              "description": "Whether or not this custom field is required to proceed with the purchase"
            }
          }
        }
      },
      "custom_fields_object": {
        "type": "object",
        "example": {
          "username": "sellix-user"
        },
        "description": "The custom fields passed by the user at checkout. The type is `map<string, string>`"
      },
      "custom_fields": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/custom_fields_object"
          },
          {
            "type": "array",
            "example": [],
            "description": "Will be `[]` if the custom fields were passed by the user, but are empty, or `null` if they were never passed"
          }
        ]
      },
      "customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cst_....",
            "description": "Customer ID"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this customer belongs"
          },
          "email": {
            "type": "string",
            "example": "sample@gmail.com",
            "description": "Customer email"
          },
          "name": {
            "type": "string",
            "example": "James",
            "description": "Customer name"
          },
          "surname": {
            "type": "string",
            "example": "Smith",
            "description": "Customer surname"
          },
          "phone": {
            "type": "string",
            "example": 3287261000,
            "description": "Customer phone"
          },
          "phone_country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer phone country code"
          },
          "country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer country code"
          },
          "street_address": {
            "type": "string",
            "example": "St. Rome 404",
            "description": "Customer street address"
          },
          "additional_address_info": {
            "type": "string",
            "example": null,
            "description": "Customer street address additional info"
          },
          "city": {
            "type": "string",
            "example": "Rome",
            "description": "Customer city"
          },
          "postal_code": {
            "type": "string",
            "example": 987,
            "description": "Customer postal code"
          },
          "state": {
            "type": "string",
            "example": "Italy",
            "description": "Customer state"
          },
          "affiliate_revenue": {
            "type": "string",
            "example": "0.00",
            "description": "Revenue customer has recieved from the affiliate program"
          },
          "affiliate_revenue_currency": {
            "type": "string",
            "example": "EUR",
            "description": "The currency the customer gets reimbursed in for the affiliate program"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the customer"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subscriptionListing"
            }
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/miniInvoice"
            }
          }
        }
      },
      "customerListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cst_....",
            "description": "Customer ID"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this customer belongs"
          },
          "email": {
            "type": "string",
            "example": "sample@gmail.com",
            "description": "Customer email"
          },
          "name": {
            "type": "string",
            "example": "James",
            "description": "Customer name"
          },
          "surname": {
            "type": "string",
            "example": "Smith",
            "description": "Customer surname"
          },
          "phone": {
            "type": "string",
            "example": 3287261000,
            "description": "Customer phone"
          },
          "phone_country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer phone country code"
          },
          "country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer country code"
          },
          "street_address": {
            "type": "string",
            "example": "St. Rome 404",
            "description": "Customer street address"
          },
          "additional_address_info": {
            "type": "string",
            "example": null,
            "description": "Customer street address additional info"
          },
          "city": {
            "type": "string",
            "example": "Rome",
            "description": "Customer city"
          },
          "postal_code": {
            "type": "string",
            "example": 987,
            "description": "Customer postal code"
          },
          "state": {
            "type": "string",
            "example": "Italy",
            "description": "Customer state"
          },
          "affiliate_revenue": {
            "type": "string",
            "example": "0.00",
            "description": "Revenue customer has recieved from the affiliate program"
          },
          "affiliate_revenue_currency": {
            "type": "string",
            "example": "EUR",
            "description": "The currency the customer gets reimbursed in for the affiliate program"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the customer"
          },
          "affiliate_percentage": {
            "type": "string",
            "example": "0.00",
            "description": "The affiliate percentage awarded to the customer"
          }
        }
      },
      "fee_breakdown": {
        "type": "object",
        "properties": {
          "service_fee": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "example": 0.5,
                "description": "The amount of the service fee"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "breakdown": {
                "type": "object",
                "properties": {
                  "flat": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "example": 0.5,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  },
                  "percentage": {
                    "type": "object",
                    "properties": {
                      "plan": {
                        "type": "string",
                        "example": "GATEWAY_NO_FEES",
                        "description": "The plan of the service fee"
                      },
                      "value": {
                        "type": "number",
                        "example": 0,
                        "description": "The amount of the service fee"
                      },
                      "amount": {
                        "type": "number",
                        "example": 0,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  }
                }
              }
            }
          },
          "aml_analysis": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "example": 1,
                "description": "The amount of the service fee"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "breakdown": {
                "type": "object",
                "properties": {
                  "flat": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "example": 0,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  },
                  "percentage": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "example": 50,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  }
                }
              }
            }
          },
          "platform_fee": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "example": 1,
                "description": "The amount of the service fee"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "breakdown": {
                "type": "object",
                "properties": {
                  "flat": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "example": 1,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  },
                  "percentage": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number",
                        "example": 0,
                        "description": "The amount of the service fee"
                      },
                      "currency": {
                        "$ref": "#/components/schemas/currency"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "feedbackProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "slug": {
            "type": "string",
            "example": "digital-good-to-download",
            "description": "The slug used to navigate to the product page on a storefront"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this invoice belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SUBSCRIPTION",
            "description": "Product type"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS"
            ],
            "example": null,
            "description": "Product subtype, can be used only with type SUBSCRIPTION"
          },
          "title": {
            "type": "string",
            "example": "Digital good to download",
            "description": "Product title"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "pay_what_you_want": {
            "type": "integer",
            "example": 1,
            "description": "Whether or not pay-what-you-want pricing is enabled"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 5,
            "description": "Product price"
          },
          "price_display": {
            "type": "number",
            "format": "double",
            "example": 4.5,
            "description": "Product price in currency"
          },
          "price_discount": {
            "type": "number",
            "example": 0,
            "description": "The discount price on the purchased goods"
          },
          "affiliate_revenue_percent": {
            "type": "number",
            "example": 15,
            "description": "The percentage of revenue to give to affiliates. -1 for disabled, 0 for default (10%), other number for a custom percent"
          },
          "price_variants": {
            "type": "object",
            "example": null,
            "description": "Variants in pricing for the product"
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "Product description"
          },
          "licensing_enabled": {
            "type": "integer",
            "enum": [0, 1], 
            "example": 1,
            "description": "Whether product licenses are generated on successful payments"
          },
          "license_period": {
            "type": "integer",
            "example": 7,
            "description": "Amount in days that licenses will be valid for"
          },
          "image_attachment": {
            "$ref": "#/components/schemas/image_attachment"
          },
          "file_attachment": {
            "type": "object",
            "example": null,
            "description": "The file to deliver to the customer (if applicable)"
          },
          "youtube_link": {
            "type": "string",
            "example": "https://www.youtube.com/example",
            "description": "The url for the YouTube video of the product"
          },
          "volume_discounts": {
            "type": "string",
            "example": "{\"volume_discounts\": [{\"type\": \"PERCENTAGE\", \"value\": \"5\", \"quantity\": \"10\"}]}",
            "description": "Stringified array of volume discounts"
          },
          "recurring_interval": {
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "example": "MONTH",
            "description": "At which frequency the customer is billed for product type SUBSCRIPTION"
          },
          "recurring_interval_count": {
            "type": "integer",
            "example": 1,
            "description": "How many recurring_interval before the customer is billed for product type SUBSCRIPTION"
          },
          "trial_period": {
            "type": "integer",
            "example": 987,
            "description": "Defines a trial period before billing the customer for product type SUBSCRIPTION"
          },
          "paypal_product_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal product is automatically created on the connected account"
          },
          "paypal_plan_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal plan is automatically created on the connected account"
          },
          "stripe_price_id": {
            "type": "string",
            "example": "price_....",
            "description": "When a product SUBSCRIPTION is created and the gateway STRIPE chosen, a Stripe price is automatically created on the connected account"
          },
          "discord_integration": {
            "type": "number",
            "example": 1,
            "description": "Whether or not the discord integeration is enabled for this product"
          },
          "discord_optional": {
            "type": "number",
            "example": 1,
            "description": "Whether or not the discord integration is optional"
          },
          "discord_set_role": {
            "type": "number",
            "example": 1,
            "description": "Whether to give users a role when added to the discord server"
          },
          "discord_server_id": {
            "type": "string",
            "example": "742768752180854827",
            "description": "The id of the discord server the bot will add users to"
          },
          "discord_role_id": {
            "type": "number",
            "example": "742772275698335765",
            "description": "The role to give users when added by the discord integration"
          },
          "discord_remove_role": {
            "type": "number",
            "example": 0,
            "description": "Whether to remove a role from the user when added to the discord server"
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product"
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product"
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant"
          },
          "gateways": {
            "$ref": "#/components/schemas/gateways"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted"
          },
          "max_risk_level": {
            "type": "integer",
            "example": 85,
            "description": "The max fraud score to allow a customer to have when purchasing the product"
          },
          "block_vpn_proxies": {
            "type": "boolean",
            "example": true,
            "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
          },
          "delivery_text": {
            "type": "string",
            "description": "Delivery text",
            "example": "The text to send to the customer when the product is delivered"
          },
          "delivery_time": {
            "type": "integer",
            "example": 162857125819,
            "description": "The timestamp for when the invoice was delivered"
          },
          "service_text": {
            "type": "string",
            "example": null,
            "description": "If type is SERVICE, then this will be delivered as the product when an invoice is processed"
          },
          "stock_delimiter": {
            "type": "string",
            "example": ",",
            "description": "How to delimit the stock if product type is SERIALS, for example with stock_delimiter \",\" and serials value first,second; the stock would have two different serials \"first\" and \"second\""
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock"
          },
          "bestseller": {
            "type": "number",
            "example": 0,
            "description": "DEPRECATED"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product"
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "If unlisted is true, the product is not shown in the storefront but can be bought through a direct link"
          },
          "on_hold": {
            "type": "boolean",
            "example": false,
            "description": "If on_hold is true, the product cannot be bought but is shown in the storefront"
          },
          "terms_of_service": {
            "type": "string",
            "example": null,
            "description": "Text containing the product's terms of service"
          },
          "warranty": {
            "type": "integer",
            "example": 86400,
            "description": "Time, in seconds, of how much the warranty for this product lasts"
          },
          "warranty_text": {
            "type": "string",
            "example": "This warranty covers",
            "description": "Clear explanation of what the warranty covers"
          },
          "watermark_enabled": {
            "type": "number",
            "example": 1,
            "description": "Whether sellix should add a watermark to your product image"
          },
          "watermark_text": {
            "type": "string",
            "example": "Sellix",
            "description": "The watermark to add to the product image"
          },
          "redirect_link": {
            "type": "string",
            "example": "https://sellix.io",
            "description": "The url to redirect a customer to on successful payment"
          },
          "label_singular": {
            "type": "string",
            "example": null
          },
          "label_plural": {
            "type": "string",
            "example": null
          },
          "private": {
            "type": "boolean",
            "example": false,
            "description": "If private is true, the product is hidden on the storefront and cannot be bought with a direct link"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the feedback"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the feedback"
          },
          "marketplace_category_id": {
            "type": "string",
            "example": 0,
            "description": "The category ID the product is a part of"
          },
          "telegram_group_id": {
            "type": "string",
            "example": "none"
          },
          "telegram_integration": {
            "type": "number",
            "example": 0
          },
          "telegram_optional": {
            "type": "number",
            "example": 0
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the store the invoice was created on"
          },
          "image_name": {
            "type": "string",
            "example": "SellixStoreExampleImage.png",
            "description": "DEPRECATED: The name of the image for the store the invoice was created on"
          },
          "image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "image_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/image_attachment"
            }
          },
          "feedback": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 10,
                "description": "Count of all the feedback"
              },
              "positive": {
                "type": "integer",
                "example": 8,
                "description": "Count of positive feedback"
              },
              "neutral": {
                "type": "integer",
                "example": 1,
                "description": "Count of neutral feedback"
              },
              "negative": {
                "type": "integer",
                "example": 1,
                "description": "Count of negative feedback"
              },
              "numbers": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "example": {
                  "5": 6,
                  "4": 2,
                  "3": 1,
                  "1": 1
                }
              },
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "example": 5,
                      "description": "The rating for the feedback"
                    },
                    "message": {
                      "type": "string",
                      "example": "Nice product!",
                      "description": "The message for the feedback"
                    },
                    "reply": {
                      "type": "string",
                      "example": "Thank you for the feedback",
                      "description": "The reply to the original feedback message"
                    },
                    "created_at": {
                      "type": "number",
                      "example": 162857125819,
                      "description": "Timestamp for the time when the feedback was created"
                    },
                    "updated_at": {
                      "type": "number",
                      "example": 162857125819,
                      "description": "Timestamp for the time when the feedback was last updated"
                    }
                  }
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Test Category",
                  "description": "The title of the category"
                },
                "uniqid": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The unique id of the category"
                }
              }
            }
          },
          "payment_gateways_fees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Internal ID of the resource"
                },
                "shop_id": {
                  "type": "integer",
                  "example": 987,
                  "description": "The shop ID to which this resource belongs"
                },
                "gateway": {
                  "$ref": "#/components/schemas/gateway"
                },
                "percent_amount": {
                  "type": "integer",
                  "example": -5
                },
                "fixed_amount": {
                  "type": "integer",
                  "example": 0
                },
                "fixed_currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "active_type": {
                  "type": "string",
                  "enum": ["PERCENT", "FIXED"],
                  "example": "null",
                  "description": "DEPRECATED"
                },
                "updated_at": {
                  "type": "string",
                  "example": "1970-01-01 00:00:00"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1975-02-28 00:00:00",
                  "description": "Datetime for what the resource was created"
                }
              }
            }
          },
          "price_conversions": {
            "type": "object", 
            "properties": {
              "AUD": {
                "type": "number",
                "example": 92.08,
                "description": "The price of the product variant in AUD"
              },
              "BGN": {
                "type": "number",
                "example": 108.62,
                "description": "The price of the product variant in BGN"
              },
              "BRL": {
                "type": "number",
                "example": 300.17,
                "description": "The price of the product variant in BRL"
              },
              "ZAR": {
                "type": "number",
                "example": 1143.49,
                "description": "The price of the product variant in ZAR"
              },
              "crypto": {
                "type": "object",
                "properties": {
                  "APE": {
                    "type": "string",
                    "example": "31.0607029506",
                    "description": "The price of the product variant in APE"
                  },
                  "BCH": {
                    "type": "string",
                    "example": "0.1271212408",
                    "description": "The price of the product variant in BCH"
                  },
                  "BNB": {
                    "type": "string",
                    "example": "0.1067436987",
                    "description": "The price of the product variant in BNB"
                  },
                  "USDC_NATIVE": {
                    "type": "string",
                    "example": "60.0000000000",
                    "description": "The price of the product variant in USDC_NATIVE"
                  }
                },
                "description": "A list of the price of the product variant in various cryptocurrencies"
              }
            }
          }
        }
      },
      "feedback": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product for which this feedback has been posted"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice for which this feedback has been posted"
          },
          "blocked": {
            "type": "boolean",
            "example": false,
            "description": "If true, this feedback has been blocked after an appeal"
          },
          "appealed": {
            "type": "boolean",
            "example": false,
            "description": "If true, an appeal has been created for this feedback"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this feedback belongs"
          },
          "message": {
            "type": "string",
            "example": "Nice product!",
            "description": "Message left by the customer"
          },
          "reply": {
            "type": "string",
            "example": "Thank you for the feedback",
            "description": "Reply left by the merchant"
          },
          "score": {
            "type": "integer",
            "example": 5,
            "maximum": 5,
            "minimum": 1,
            "description": "Score left by the customer, if 0 no score has been left"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1705146647,
            "description": "Timestamp for the creation of the feedback"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1711769254,
            "description": "Date, available if the product has been edited"
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title for which this feedback has been created"
          },
          "product_image_name": {
            "type": "string",
            "description": "Unique id of the image attachment for this product with the image extension included",
            "example": "product_image_name2834u5y4291u89u1.png"
          },
          "product_image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in our self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "invoice": {
            "$ref": "#/components/schemas/miniInvoice"
          },
          "product": {
            "$ref": "#/components/schemas/feedbackProduct"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the feedback"
          }
        }
      },
      "feedbackListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice for which this feedback has been posted"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product for which this feedback has been posted"
          },
          "product_title": {
            "type": "string",
            "example": "Product Title",
            "description": "Title of the product for which this feedback has been posted"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this feedback belongs"
          },
          "message": {
            "type": "string",
            "example": "Nice product!",
            "description": "Message left by the customer"
          },
          "reply": {
            "type": "string",
            "example": "Thank you for the feedback",
            "description": "Reply left by the merchant"
          },
          "score": {
            "type": "integer",
            "example": 5,
            "maximum": 5,
            "minimum": 1,
            "description": "Score left by the customer, if 0 no score has been left"
          },
          "appealed": {
            "type": "boolean",
            "example": false,
            "description": "If true, an appeal has been created for this feedback"
          },
          "appeal_outcome": {
            "type": "string",
            "enum": ["APPROVED", "NO_APPEAL_AVAILABLE"],
            "example": "NO_APPEAL_AVAILABLE",
            "description": "The outcome of the appeal"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1705146647,
            "description": "Timestamp for the creation of the feedback"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1711769254,
            "description": "Date, available if the product has been edited"
          },
          "blocked": {
            "type": "boolean",
            "example": false,
            "description": "If true, this feedback has been blocked after an appeal"
          }
        }
      },
      "gateway": {
        "type": "string",
        "enum": [
          "PAYPAL",
          "STRIPE",
          "SKRILL",
          "PERFECT_MONEY",
          "CASH_APP",
          "BINANCE",
          "BITCOIN",
          "LITECOIN",
          "ETHEREUM",
          "BITCOIN_CASH",
          "NANO",
          "MONERO",
          "SOLANA",
          "RIPPLE",
          "BINANCE_COIN",
          "USDC",
          "USDT",
          "TRON",
          "BITCOIN_LN",
          "CONCORDIUM",
          "POLYGON",
          "PEPE",
          "DAI",
          "WETH",
          "APE",
          "SHIB",
          "USDC_NATIVE",
          "DOGECOIN",
          "PYTH",
          "BONK",
          "JUP",
          "JITO",
          "WEN",
          "RENDER",
          "MOBILE",
          "HNT"
        ],
        "example": "STRIPE"
      },
      "gateways": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "PAYPAL",
            "STRIPE",
            "SKRILL",
            "PERFECT_MONEY",
            "CASH_APP",
            "BINANCE",
            "BITCOIN",
            "LITECOIN",
            "ETHEREUM",
            "BITCOIN_CASH",
            "NANO",
            "MONERO",
            "SOLANA",
            "RIPPLE",
            "BINANCE_COIN",
            "USDC",
            "USDT",
            "TRON",
            "BITCOIN_LN",
            "CONCORDIUM",
            "POLYGON",
            "PEPE",
            "DAI",
            "WETH",
            "APE",
            "SHIB",
            "USDC_NATIVE",
            "DOGECOIN",
            "PYTH",
            "BONK",
            "JUP",
            "JITO",
            "WEN",
            "RENDER",
            "MOBILE",
            "HNT"
          ]
        },
        "example": [
          "PAYPAL",
          "STRIPE",
          "BITCOIN"
        ]
      },
      "gateway_fees": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "shop_id": {
            "type": "integer",
            "example": 1,
            "description": "The shop ID to which this gateway fee belongs"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "The gateway of the gateway fee"
          },
          "percent_amount": {
            "type": "number",
            "example": 3,
            "description": "The percent amount of the gateway fee"
          },
          "fixed_amount": {
            "type": "number",
            "example": 0,
            "description": "The fixed amount of the gateway fee"
          },
          "fixed_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "active_type": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIXED"
            ],
            "example": "PERCENT",
            "description": "The active type of the gateway fee"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "1975-02-28 15:05:25",
            "description": "DateTime, available if the gateway fee has been updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "1975-02-28 15:05:25",
            "description": "DateTime, available if the gateway fee has been created"
          },
          "conversions": {
            "type": "object", 
            "properties": {
              "AUD": {
                "type": "number",
                "example": 12.43,
                "description": "The price of the product variant in AUD"
              },
              "BGN": {
                "type": "number",
                "example": 14.66,
                "description": "The price of the product variant in BGN"
              },
              "BRL": {
                "type": "number",
                "example": 40.52,
                "description": "The price of the product variant in BRL"
              },
              "ZAR": {
                "type": "number",
                "example": 154.37,
                "description": "The price of the product variant in ZAR"
              },
              "crypto": {
                "type": "object",
                "properties": {
                  "APE": {
                    "type": "string",
                    "example": "0.00435",
                    "description": "The price of the product variant in APE"
                  },
                  "BCH": {
                    "type": "string",
                    "example": "1.062",
                    "description": "The price of the product variant in BCH"
                  },
                  "BNB": {
                    "type": "string",
                    "example": "1.265",
                    "description": "The price of the product variant in BNB"
                  },
                  "USDC_NATIVE": {
                    "type": "string",
                    "example": "0.00225",
                    "description": "The price of the product variant in USDC_NATIVE"
                  }
                },
                "description": "A list of the price of the product variant in various cryptocurrencies"
              }
            }
          }
        }
      },
      "group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The unique identifyer for the shop"
          },
          "title": {
            "type": "string",
            "example": "Digital goods to download",
            "description": "Group title"
          },
          "image_attachment": {
            "type": "string",
            "example": "50ab99797bd6b36f54089a7f6151c56e7a902be4bdaa4204e63961625bb9cb54",
            "description": "DEPRECATED: Unique id of the image attachment for this product"
          },
          "unlisted": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the group is unlisted"
          },
          "sort_priority": {
            "type": "number",
            "example": 1,
            "description": "The priority of the group on the storefront"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the group"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the group has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the group"
          },
          "products_bound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product"
            }
          },
          "image_attachment_info": {
            "$ref": "#/components/schemas/image_attachment"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the store the group is on"
          },
          "theme": {
            "type": "string",
            "enum": ["dark"],
            "example": "dark",
            "description": "The theme of the group"
          },
          "dark_mode": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the group is in dark mode"
          },
          "ui_style_configuration": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the group has a custom UI style configuration"
          }
        }
      },
      "listedGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The unique identifyer for the shop"
          },
          "title": {
            "type": "string",
            "example": "Digital goods to download",
            "description": "Group title"
          },
          "image_attachment": {
            "type": "string",
            "example": "50ab99797bd6b36f54089a7f6151c56e7a902be4bdaa4204e63961625bb9cb54",
            "description": "DEPRECATED: Unique id of the image attachment for this product"
          },
          "unlisted": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the group is unlisted"
          },
          "sort_priority": {
            "type": "number",
            "example": 1,
            "description": "The priority of the group on the storefront"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the group"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the group has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the group"
          },
          "image_name": {
            "type": "string",
            "example": "SellixImageName.png",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "image_storage": {
            "type": "string",
            "example": "GROUPS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "products_bound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/miniProduct"
            }
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "The number of products in the group"
          }
        }
      },
      "image_attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "example": "sample2b21744421e9645ed2abef4d303fd16a30fd4bb32f580d7a615ef6e0c7"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "storage": {
            "type": "string",
            "enum": ["PRODUCTS"],
            "example": "PRODUCTS"
          },
          "type": {
            "type": "string",
            "enum": ["IMAGE"],
            "example": "IMAGE"
          },
          "name": {
            "type": "string",
            "example": "sample.png"
          },
          "original_name": {
            "type": "string",
            "example": "file.png"
          },
          "extension": {
            "type": "string",
            "enum": ["png", "webp", "jpg", "jpeg", "avif", "gif"],
            "example": "png"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this resource belongs"
          },
          "product_id": {
            "type": "string",
            "example": "sample...."
          },
          "size": {
            "type": "integer",
            "example": 987
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the image"
          }
        }
      },
      "invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "recurring_billing_id": {
            "type": "string",
            "format": "uuid",
            "example": "sub_pp_....",
            "description": "Unique ID of the recurring bill"
          },
          "payout_configuration": {
            "type": "string",
            "example": null,
            "description": "DEPRECATED"
          },
          "secret": {
            "type": "string",
            "example": "sample-secret",
            "description": "An internal Sellix secret used for completing tasks with our internal API"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION",
              "PRODUCT_SUBSCRIPTION_V2"
            ],
            "example": "PRODUCT",
            "description": "Invoice type. For subscriptions, the invoice type is PRODUCT_SUBSCRIPTION as SUBSCRIPTION is reserved for Sellix-own plans"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERIALS",
            "description": "Product type"
          },
          "origin": {
            "type": "string",
            "enum": [
              "STOREFRONT",
              "API"
            ],
            "example": "STOREFRONT",
            "description": "How the invoice was created"
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 4.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable"
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen"
          },
          "product_variants": {
            "type": "object",
            "properties": {
              "{product_id}": {
                "description": "The id of the product the plan belongs to",
                "$ref": "#/components/schemas/product_variant"
              }
            }
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD"
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this invoice belongs"
          },
          "shop_image_name": {
            "type": "string",
            "example": "ShopImageName.png",
            "description": "DEPRECATED: Unique id of the image attachment for this merchant with the image extension included"
          },
          "shop_image_storage": {
            "type": "string",
            "enum": ["PRODUCTS", "SHOPS"],
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "Name of the merchant"
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "ID of the customer"
          },
          "affliate_revenue_customer_id": {
            "type": "string",
            "example": null,
            "description": "ID of the affiliate"
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product linked to this invoice, if any"
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title"
          },
          "product_type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERIALS",
            "description": "Product type"
          },
          "subscription_id": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Unique ID of the subscription purchased"
          },
          "subscription_time": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Time, in seconds, of the subscription purchased"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "paypal_apm": {
            "type": "string",
            "example": null,
            "description": "PayPal Alternative Payment Method name, such as iDEAL, used if gateway is PAYPAL"
          },
          "stripe_apm": {
            "type": "string",
            "enum": [
              "afterpay_clearpay",
              "alipay",
              "bancontact",
              "au_becs_debit",
              "boleto",
              "eps",
              "fpx",
              "giropay",
              "grabpay",
              "ideal",
              "klarna",
              "oxxo",
              "p24",
              "sofort",
              "wechat_pay"
            ],
            "example": null,
            "description": "Stripe Alternative Payment Method name, such as iDEAL, used if gateway is STRIPE"
          },
          "paypal_email": {
            "type": "string",
            "example": null,
            "description": "Merchant PayPal email"
          },
          "paypal_order_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal order ID"
          },
          "paypal_payer_email": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the PayPal's email used for the purchase"
          },
          "paypal_fee": {
            "type": "string",
            "example": 987,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total"
          },
          "paypal_subscription_id": {
            "type": "integer",
            "example": null,
            "description": "ID of the paypal subscription"
          },
          "paypal_subscription_link": {
            "type": "integer",
            "example": null,
            "description": "Link for the merchant to purchase the subscription from"
          },
          "lex_order_id": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "lex_payment_method": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "paydash_paymentID": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "virtual_payments_id": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "stripe_client_secret": {
            "type": "string",
            "example": null,
            "description": "Client secret used to create the STRIPE paymentIntent"
          },
          "stripe_price_id": {
            "type": "string",
            "example": null,
            "description": "If the invoice type is PRODUCT_SUBSCRIPTION or SUBSCRIPTION, refers to the STRIPE price ID"
          },
          "skrill_email": {
            "type": "string",
            "example": null,
            "description": "Merchant Skrill email"
          },
          "skrill_sid": {
            "type": "string",
            "example": null,
            "description": "Skrill unique ID linked to the invoice"
          },
          "skrill_link": {
            "type": "string",
            "example": null,
            "description": "Skrill link to redirect the customer to"
          },
          "perfectmoney_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "PerfectMoney payment ID linked to the invoice"
          },
          "binance_invoice_id": {
            "type": "string",
            "example": null,
            "description": "ID for binance invoice"
          },
          "binance_qrcode": {
            "type": "string",
            "example": null,
            "description": "Full Binance QRCODE string"
          },
          "binance_checkout_url": {
            "type": "string",
            "example": null,
            "description": "Checkout URL for Binance invoice"
          },
          "crypto_address": {
            "type": "string",
            "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
            "description": "Cryptocurrency address linked to this invoice"
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate"
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer"
          },
          "crypto_uri": {
            "type": "string",
            "example": "solana:3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B?amount=0.014174",
            "description": "URI used to create the QRCODE"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice"
          },
          "crypto_scheduled_payout": {
            "type": "boolean",
            "example": false,
            "description": "If true, a scheduled payout for this invoice's cryptocurrency address has been sent"
          },
          "crypto_payout": {
            "type": "boolean",
            "example": true,
            "description": "If true, an instant payout for this invoice's cryptocurrency address has been sent"
          },
          "fee_billed": {
            "type": "boolean",
            "example": true,
            "description": "If true, the Sellix fee_percentage has already been collected"
          },
          "bill_info": {
            "type": "object",
            "example": null,
            "description": "If invoice type is MONTHLY_BILL, contains a breakdown of the fees that need to be collected"
          },
          "cashapp_qrcode": {
            "type": "string",
            "example": null,
            "description": "Full CashApp QRCODE string"
          },
          "cashapp_note": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique note for the customer to leave in the CashApp payment"
          },
          "cashapp_cashtag": {
            "type": "string",
            "example": null,
            "description": "CashApp cashtag used to create the QRCODE"
          },
          "country": {
            "type": "string",
            "example": "IT",
            "description": "Customer country"
          },
          "location": {
            "type": "string",
            "example": "Bologna, Emilia-Romagna (Europe/Rome)",
            "description": "Customer location"
          },
          "ip": {
            "type": "string",
            "example": "255.11.12.255",
            "description": "Customer IP"
          },
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, a VPN or Proxy has been detected"
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.26.8",
            "description": "Customer User Agent"
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API"
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified"
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent"
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice"
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock"
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice"
          },
          "fee_percentage": {
            "type": "integer",
            "example": 5,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees"
          },
          "fee_breakdown": {
            "$ref": "#/components/schemas/fee_breakdown"
          },
          "discount_breakdown": {
            "type": "object",
            "example": null,
            "description": "Representation of how discount was applied to invoice"
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number",
            "deprecated": true
          },
          "product_addons": {
            "$ref": "#/components/schemas/product_addons"
          },
          "bundle_config": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bundle_config"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the invoice"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the invoice"
          },
          "approved_address": {
            "$ref": "#/components/schemas/approved_address"
          },
          "service_text": {
            "type": "string",
            "example": null,
            "description": "If the product type is SERVICE, this field contains additional details on the type of service provided by the merchant"
          },
          "ip_info": {
            "$ref": "#/components/schemas/ip_info"
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook"
            },
            "example": [
              {
                "uniqid": "sample....",
                "url": "https://dev.sellix.io/v1/webhook",
                "event": "order:paid",
                "retries": 1,
                "response_code": 200,
                "created_at": 1640777735,
                "payload": "{\"sample\":\"sellix\"}",
                "response": "webhook response"
              }
            ],
            "description": "Webhook responses for this invoice"
          },
          "rewards_data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clause": {
                    "type": "string",
                    "example": null
                  },
                  "clause_value": {
                    "type": "string",
                    "example": null
                  },
                  "clause_currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "action": {
                    "type": "string",
                    "example": null
                  },
                  "action_value": {
                    "type": "string",
                    "example": null
                  },
                  "action_currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "action_send_product_variant": {
                    "type": "string",
                    "example": null
                  },
                  "created_at": {
                    "type": "integer",
                    "format": "timestamp",
                    "example": 162857125819,
                    "description": "Creation date of the invoice"
                  },
                  "updated_at": {
                    "type": "integer",
                    "format": "timestamp",
                    "example": 162857125819,
                    "description": "Timestamp for when resource was last updated"
                  },
                  "log": {
                    "type": "object",
                    "example": null
                  },
                  "reward_info": {
                    "type": "object",
                    "example": null
                  }
                }
              }
          },
          "paypal_dispute": {
            "$ref": "#/components/schemas/paypal_dispute"
          },
          "product_downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product_download"
            }
          },
          "payment_link_id": {
            "type": "string",
            "example": null,
            "description": "The ID for the payment link, if invoice was created by a payment link"
          },
          "cashapp_email_configured": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not cashapp email is configured"
          },
          "license": {
            "type": "boolean",
            "example": false,
            "description": "True if the product is of type LICENSE"
          },
          "status_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoice_status"
            },
            "example": [
              {
                "id": 10726392,
                "invoice_id": "sample-....-....",
                "status": "PENDING",
                "details": "The invoice has been created and we are now waiting to receive a payment",
                "created_at": 1640777609
              },
              {
                "id": 10726409,
                "invoice_id": "sample-....-....",
                "status": "COMPLETED",
                "details": "The invoice has been flagged as completed and the product has been shipped",
                "created_at": 1640777796
              }
            ],
            "description": "Additional details on the invoice status change"
          },
          "aml_wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/aml_wallet"
            }
          },
          "crypto_transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/crypto_transaction"
            },
            "example": [
              {
                "crypto_amount": 0.014174,
                "hash": "234dB62Q3X9nyqussRSHW5x9rXe7NzyS3hLcwSTtzd9WLWfrHFUtX4KS6DAMyyHnvRgUNiqUvZdw2T9XWJqa8sPW",
                "confirmations": 1,
                "created_at": 1640777734,
                "updated_at": 1640777734
              }
            ],
            "description": "Crypto transactions received to fulfill this invoice"
          },
          "product": {
            "$ref": "#/components/schemas/product"
          },
          "total_conversions": {
            "example": []
          },
          "theme": {
            "type": "string",
            "example": "dark",
            "description": "What Sellix theme the shop is set to"
          },
          "dark_mode": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "1 if darkmode is enabled, 0 if it is disabled"
          },
          "crypto_mode": {
            "example": "DEFAULT"
          },
          "gateways_available": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PAYPAL",
              "STRIPE",
              "MONERO"
            ],
            "description": "gateways available for the update invoice Developers API"
          },
          "country_regulations": {
            "type": "string",
            "example": "IT",
            "description": "The country the shop is opperated in"
          },
          "available_stripe_apm": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "afterpay_clearpay",
                "description": "The stripe ID for the APM"
              },
              "name": {
                "type": "string",
                "example": "Afterpay and Clearpay",
                "description": "The stripe name for the APM"
              }
            }
          },
          "serials": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "activation-key-#1",
              "activation-key-#2",
              "activation-key-#3"
            ],
            "description": "If product type is SERIALS, provide the serials linked to this invoice"
          },
          "shop_payment_gateways_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gateway_fees"
            }
          },
          "shop_paypal_credit_card": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled purchase with Credit Card through PayPal"
          },
          "shop_force_paypal_email_delivery": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled invoice shipment to the PayPal customer email"
          },
          "shop_walletconnect_id": {
            "example": null
          },
          "original_developer_return_url": {
            "type": "string",
            "example": "/",
            "description": "The original return url of the order"
          },
          "rates_snapshot": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1,
                "description": "Internal ID of the resource"
              },
              "USD": {
                "type": "string",
                "example": "1.0000",
                "description": "The rate in USD"
              },
              "CAD": {
                "type": "string",
                "example": "1.3542",
                "description": "The rate in CAD"
              },
              "HKD": {
                "type": "string",
                "example": "7.8269",
                "description": "The rate in HKD"
              }
            }
          },
          "void_times": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateways": {
                  "$ref": "#/components/schemas/gateways"
                },
                "conf": {
                  "type": "object",
                  "properties": {
                    "void": {
                      "type": "integer",
                      "example": 86400
                    },
                    "wait_period": {
                      "type": "object",
                      "example": "null"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "invoice_status": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 10726392,
            "description": "Unique ID of the invoice status"
          },
          "invoice_id": {
            "type": "string",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice this status is linked to"
          },
          "status": {
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice"
          },
          "details": {
            "type": "string",
            "example": "The invoice has been flagged as completed and the product has been shipped",
            "description": "Additional details on the status change"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the status change date"
          }
        }
      },
      "ip_info": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true,
            "description": "IP info retrieved successfully"
          },
          "message": {
            "type": "string",
            "example": "Success",
            "description": "Any other details linked to this IP"
          },
          "fraud_score": {
            "type": "integer",
            "maximum": 100,
            "minimum": 987,
            "example": 25,
            "description": "IP Fraud Score details"
          },
          "country_code": {
            "type": "string",
            "example": "IT",
            "description": "IP country code"
          },
          "region": {
            "type": "string",
            "example": "Emilia Romagna",
            "description": "IP region"
          },
          "city": {
            "type": "string",
            "example": "Bologna",
            "description": "IP city"
          },
          "ISP": {
            "type": "string",
            "example": "Telecom TIM",
            "description": "IP ISP"
          },
          "ASN": {
            "type": "integer",
            "example": 308172,
            "description": "ISP ASN"
          },
          "operating_system": {
            "type": "string",
            "example": "Mac 10.16",
            "description": "Customer device operating system"
          },
          "browser": {
            "type": "string",
            "example": "Chrome 96.0",
            "description": "Customer device browser"
          },
          "organization": {
            "type": "string",
            "example": "Telecom TIM",
            "description": "IP organization"
          },
          "is_crawler": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected as a crawler"
          },
          "timezone": {
            "type": "string",
            "example": "Europe/Rome",
            "description": "Customer timezone"
          },
          "mobile": {
            "type": "boolean",
            "example": false,
            "description": "If true, the customer used a mobile device"
          },
          "host": {
            "type": "string",
            "example": "cust.vodafonedsl.it",
            "description": "ISP host"
          },
          "proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using a proxy"
          },
          "vpn": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using a VPN"
          },
          "tor": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using TOR"
          },
          "active_vpn": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has an active VPN connection"
          },
          "active_tor": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has an active TOR connection"
          },
          "device_brand": {
            "type": "string",
            "example": "Apple",
            "description": "Customer device brand"
          },
          "device_model": {
            "type": "string",
            "example": "N/A",
            "description": "Customer device model"
          },
          "recent_abuse": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected in an online abuse"
          },
          "bot_status": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected as a BOT"
          },
          "connection_type": {
            "type": "string",
            "example": "Residential",
            "description": "Customer connection type"
          },
          "abuse_velocity": {
            "type": "string",
            "example": "none",
            "description": "IP abuse velocity"
          },
          "zip_code": {
            "type": "string",
            "example": "N/A",
            "description": "If detected, customer ZIP code"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "example": 1,
            "description": "IP latitude"
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "IP longitude"
          },
          "request_id": {
            "type": "string",
            "example": "sample....",
            "description": "IP request ID used for internal reference"
          }
        },
        "description": "Additional info on the customer IP"
      },
      "invoiceListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 2.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable"
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen"
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD"
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD"
          },
          "product_variants": {
            "type": "object",
            "properties": {
              "{product_id}": {
                "description": "The id of the product the plan belongs to",
                "$ref": "#/components/schemas/product_variant"
              }
            }
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "shop_id": {
            "type": "integer",
            "example": null,
            "description": "The shop ID to which this invoice belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Invoice type. For subscriptions, the invoice type is PRODUCT_SUBSCRIPTION as SUBSCRIPTION is reserved for Sellix-own plans"
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer"
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product linked to this invoice, if any"
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title"
          },
          "product_type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERIALS",
            "description": "Product type"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page"
          },
          "paypal_email": {
            "type": "string",
            "description": "DEPRECATED: Merchant PayPal email",
            "deprecated": true
          },
          "paypal_order_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal order ID"
          },
          "paypal_fee": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total"
          },
          "paypal_payer_email": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the PayPal's email used for the purchase"
          },
          "skrill_email": {
            "type": "string",
            "example": null,
            "description": "Merchant Skrill email"
          },
          "skrill_sid": {
            "type": "string",
            "example": null,
            "description": "Skrill unique ID linked to the invoice"
          },
          "skrill_link": {
            "type": "string",
            "example": null,
            "description": "Skrill link to redirect the customer to"
          },
          "perfectmoney_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "PerfectMoney payment ID linked to the invoice"
          },
          "crypto_address": {
            "type": "string",
            "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
            "description": "Cryptocurrency address linked to this invoice"
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate"
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer"
          },
          "crypto_uri": {
            "type": "string",
            "example": "solana:3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B?amount=0.014174",
            "description": "URI used to create the QRCODE"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice"
          },          
          "cashapp_cashtag": {
            "type": "string",
            "example": null,
            "description": "CashApp cashtag used to create the QRCODE"
          },
          "cashapp_note": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique note for the customer to leave in the CashApp payment"
          },
          "country": {
            "type": "string",
            "example": "IT",
            "description": "Customer country"
          },
          "location": {
            "type": "string",
            "example": "Bologna, Emilia-Romagna (Europe/Rome)",
            "description": "Customer location"
          },
          "ip": {
            "type": "string",
            "example": "255.11.12.255",
            "description": "Customer IP"
          },
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, a VPN or Proxy has been detected"
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.26.8",
            "description": "Customer User Agent"
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount"
          },
          "coupon_code": {
            "type": "string",
            "example": null,
            "description": "If coupon_id is specified, coupon_code contains the code used during the checkout"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API"
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified"
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent"
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice"
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock"
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice"
          },
          "fee_percentage": {
            "type": "integer",
            "example": 5,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees"
          },
          "fee_breakdown": {
            "$ref": "#/components/schemas/fee_breakdown"
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the invoice"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the invoice"
          },
          "is_evm_approved": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the EVM transaction is approved"
          },
          "fee_billed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not a fee was billed to the customer"
          },
          "crypto_scheduled_payout": {
            "type": "object",
            "example": null,
            "properties": {
              "amount": {
                "type": "number",
                "format": "double",
                "example": 0.0021688598,
                "description": "Cryptocurrency amount sent in the payout transaction"
              },
              "transaction_output": {
                "type": "number",
                "format": "double",
                "example": 0.0020222568,
                "description": "Total output of the transaction, equals to amount-transaction_fee-service_fee"
              },
              "shop_cut": {
                "type": "number",
                "format": "double",
                "example": 0.0020222568,
                "description": "Equal to transaction_output"
              },
              "transaction_fee": {
                "type": "number",
                "format": "double",
                "example": 0.00003816,
                "description": "Crypto transaction fee"
              },
              "service_fee": {
                "type": "number",
                "format": "double",
                "example": 0.000108443,
                "description": "Service fee, Sellix cut"
              },
              "tx": {
                "type": "string",
                "example": "ef1cc930f7374d45019196a635f3b4d1c12cbeb106e8b3dbeadbe30ac034beae",
                "description": "Crypto transaction hash"
              },
              "created_at": {
                "type": "integer",
                "format": "timestamp",
                "example": 162857125819,
                "description": "Timestamp for when the transaction was broadcast"
              }
            },
            "description": "If the payout for this invoice is SCHEDULED and not INSTANT and a cryptocurrency gateway is used, once the payout has been sent this field will contain additional info on it"
          },
          "shop_paypal_credit_card": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not to support credit cards on PayPal"
          },
          "shop_force_paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not to deliver the product to the PayPal email address"
          }
       }
      },
      "license": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this license belongs"
          },
          "product_id": {
            "type": "string",
            "example": "sample....",
            "description": "The product ID to which this license belongs"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice this license is linked to"
          },
          "license_key": {
            "type": "string",
            "example": "LICENSE-SAMPLE-00",
            "description": "License key"
          },
          "hardware_id": {
            "type": "string",
            "example": "098H52ST479QE053V2",
            "description": "Hardware ID"
          },
          "uses": {
            "type": "integer",
            "example": 987,
            "description": "Number of uses for this license, this value is increased at every license check"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01 00:00:00",
            "description": "Expiration date of the license"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "1975-02-28 00:00:00",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01 00:00:00",
            "description": "Date, available if the license has been updated"
          }
        }
      },
      "listedProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "slug": {
            "type": "string",
            "example": "digital-good-to-download",
            "description": "The slug used to navigate to the product page on a storefront"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this resource belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SUBSCRIPTION",
            "description": "Product type"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS"
            ],
            "example": null,
            "description": "Product subtype, can be used only with type SUBSCRIPTION"
          },
          "title": {
            "type": "string",
            "example": "Digital good to download",
            "description": "Product title"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "pay_what_you_want": {
            "type": "integer",
            "example": 1,
            "description": "Whether or not pay-what-you-want pricing is enabled"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 5.00,
            "description": "Product price"
          },
          "price_display": {
            "type": "number",
            "format": "double",
            "example": 5.00,
            "description": "Product price in currency"
          },
          "price_discount": {
            "type": "number",
            "format": "double",
            "example": 1.00,
            "description": "The discount price on the purchased goods"
          },
          "affiliate_revenue_percent": {
            "type": "number",
            "example": 15,
            "description": "The percentage of revenue to give to affiliates. -1 for disabled, 0 for default (10%), other number for a custom percent"
          },
          "price_variants": {
            "type": "object",
            "example": null,
            "description": "Variants in pricing for the product"
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "Product description"
          },
          "licensing_enabled": {
            "type": "integer",
            "enum": [0,1], 
            "example": 1,
            "description": "Whether product licenses are generated on successful payments"
          },
          "license_period": {
            "type": "integer",
            "example": 7,
            "description": "Amount in days that licenses will be valid for"
          },
          "image_attachment": {
            "$ref": "#/components/schemas/image_attachment"
          },
          "file_attachment": {
            "type": "string",
            "example": null,
            "description": "Unique id of the file attachment for this product if the product type is FILE"
          },
          "youtube_link": {
            "type": "string",
            "example": "https://www.youtube.com/example",
            "description": "The url for the YouTube video of the product"
          },
          "volume_discounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "PERCENTAGE",
                    "FIXED"
                  ],
                  "example": "PERCENTAGE",
                  "description": "Whether the discount value is a percentage or a fixed amount"
                },
                "value": {
                  "type": "integer",
                  "example": 5,
                  "description": "Value of a percentage or fixed discount"
                },
                "quantity": {
                  "type": "integer",
                  "example": 10,
                  "description": "How much of this product needs to be purchased in order to be eligible for this volume discount"
                }
              }
            },
            "description": "Array of volume discounts"
          },
          "recurring_interval": {
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "example": "MONTH",
            "description": "At which frequency the customer is billed for product type SUBSCRIPTION"
          },
          "recurring_interval_count": {
            "type": "integer",
            "example": 1,
            "description": "How many recurring_interval before the customer is billed for product type SUBSCRIPTION"
          },
          "trial_period": {
            "type": "integer",
            "example": 987,
            "description": "Defines a trial period before billing the customer for product type SUBSCRIPTION"
          },
          "paypal_product_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal product is automatically created on the connected account"
          },
          "paypal_plan_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal plan is automatically created on the connected account"
          },
          "stripe_price_id": {
            "type": "string",
            "example": "price_....",
            "description": "When a product SUBSCRIPTION is created and the gateway STRIPE chosen, a Stripe price is automatically created on the connected account"
          },
          "discord_integration": {
            "type": "number",
            "example": 1,
            "description": "Whether or not the discord integeration is enabled for this product"
          },
          "discord_optional": {
            "type": "number",
            "example": 1,
            "description": "Whether or not the discord integration is optional"
          },
          "discord_set_role": {
            "type": "number",
            "example": 1,
            "description": "Whether to give users a role when added to the discord server"
          },
          "discord_server_id": {
            "type": "string",
            "example": "742768752180854827",
            "description": "The id of the discord server the bot will add users to"
          },
          "discord_role_id": {
            "type": "number",
            "example": "742772275698335765",
            "description": "The role to give users when added by the discord integration"
          },
          "discord_remove_role": {
            "type": "number",
            "example": 0,
            "description": "Whether to remove a role from the user when added to the discord server"
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product"
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product"
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant"
          },
          "gateways": {
            "$ref": "#/components/schemas/gateways"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "rcon_commands": {
            "type": "string",
            "example": "[\"say hi\", \"say hi\"]",
            "description": "Stringified array of the commands to be executed on the RCON server"
          },
          "rcon_execution_type": {
            "type": "string",
            "enum": ["AUTOMATIC", "MANUAL"],
            "example": "AUTOMATIC",
            "description": "The type of execution for the RCON commands. Only applies to RCON products"
          },
          "rcon_start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-20 00:00:00",
            "description": "The time for when the RCON product should start"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted"
          },
          "max_risk_level": {
            "type": "integer",
            "example": 85,
            "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
          },
          "block_vpn_proxies": {
            "type": "boolean",
            "example": true,
            "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
          },
          "delivery_text": {
            "type": "string",
            "example": "Thank you for purchasing this subscription!",
            "description": "The text to be delivered to the customer after payment"
          },
          "delivery_time": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "The timestamp for when the invoice was delivered"
          },
          "service_text": {
            "type": "string",
            "example": "In order to get you services, please contact us at",
            "description": "The text to be delivered to the customer after payment for a service"
          },
          "stock_delimiter": {
            "type": "string",
            "example": ",",
            "description": "How to delimit the stock if product type is SERIALS, for example with stock_delimiter \",\" and serials value first,second; the stock would have two different serials \"first\" and \"second\""
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock"
          },
          "dynamic_webhook": {
            "type": "object",
            "example": null
          },
          "bestseller": {
            "type": "integer",
            "example": 0,
            "description": "DEPRECATED"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product"
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "If unlisted is true, the product is not shown in the storefront but can be bought through a direct link"
          },
          "on_hold": {
            "type": "boolean",
            "example": false,
            "description": "If on_hold is true, the product cannot be bought but is shown in the storefront"
          },
          "terms_of_service": {
            "type": "string",
            "example": null,
            "description": "Text containing the product's terms of service"
          },
          "warranty": {
            "type": "integer",
            "example": 86400,
            "description": "Time, in seconds, of how much the warranty for this product lasts"
          },
          "warranty_text": {
            "type": "string",
            "example": "This warranty covers",
            "description": "Clear explanation of what the warranty covers"
          },
          "watermark_enabled": {
            "type": "number",
            "example": 1,
            "description": "Whether sellix should add a watermark to your product image"
          },
          "watermark_text": {
            "type": "string",
            "example": "Sellix",
            "description": "The watermark to add to the product image"
          },
          "redirect_link": {
            "type": "string",
            "example": "https://sellix.io",
            "description": "The url to redirect a customer to on successful payment"
          },
          "label_singular": {
            "type": "string",
            "example": null
          },
          "label_plural": {
            "type": "string",
            "example": null
          },
          "private": {
            "type": "boolean",
            "example": false,
            "description": "If private is true, the product is hidden on the storefront and cannot be bought with a direct link"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the product"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the product"
          },
          "marketplace_category_id": {
            "type": "string",
            "example": 0,
            "description": "The category ID the product is a part of"
          },
          "telegram_group_id": {
            "type": "string",
            "example": null,
            "description": "The Telegram group ID"
          },
          "telegram_integration": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the Telegram integration is enabled"
          },
          "telegram_optional": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the Telegram integration is optional"
          },
          "image_name": {
            "type": "string",
            "example": "SellixImageName.png",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "image_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/image_attachment"
            }
          },
          "feedback": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 10,
                "description": "Count of all the feedback"
              },
              "positive": {
                "type": "integer",
                "example": 8,
                "description": "Count of positive feedback"
              },
              "neutral": {
                "type": "integer",
                "example": 1,
                "description": "Count of neutral feedback"
              },
              "negative": {
                "type": "integer",
                "example": 1,
                "description": "Count of negative feedback"
              },
              "numbers": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "example": {
                  "5": 6,
                  "4": 2,
                  "3": 1,
                  "1": 1
                }
              },
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "example": 5
                    },
                    "message": {
                      "type": "string",
                      "example": "Nice product!"
                    },
                    "reply": {
                      "type": "string",
                      "example": "Thank you for the feedback"
                    },
                    "created_at": {
                      "type": "integer",
                      "format": "timestamp",
                      "example": 162857125819,
                      "description": "Timestamp for the creation of the feedback"
                    },
                    "updated_at": {
                      "type": "number",
                      "example": 162857125819
                    }
                  }
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Test Category",
                  "description": "The title of the category"
                },
                "uniqid": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The unique id of the category"
                }
              }
            }
          },
          "payment_gateways_fees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Internal ID of the resource"
                },
                "shop_id": {
                  "type": "integer",
                  "example": 987,
                  "description": "The shop ID to which this resource belongs"
                },
                "gateway": {
                  "$ref": "#/components/schemas/gateway"
                },
                "percent_amount": {
                  "type": "integer",
                  "example": -5
                },
                "fixed_amount": {
                  "type": "integer",
                  "example": 0
                },
                "fixed_currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "active_type": {
                  "type": "string",
                  "enum": ["PERCENT", "FIXED"],
                  "example": "null",
                  "description": "DEPRECATED"
                },
                "updated_at": {
                  "type": "string",
                  "example": "1970-01-01 00:00:00"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1975-02-28 00:00:00",
                  "description": "Datetime for the creation of the resource"
                }
              }
            }
          }
        }
      },
      "miniGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The unique identifyer for the shop"
          },
          "title": {
            "type": "string",
            "example": "Digital goods to download",
            "description": "Group title"
          },
          "image_attachment": {
            "type": "string",
            "example": "sample......",
            "description": "DEPRECATED: Unique id of the image attachment for this product"
          },
          "unlisted": {
            "type": "number",
            "example": 1,
            "description": "Whether or not the group is unlisted"
          },
          "sort_priority": {
            "type": "number",
            "example": 1,
            "description": "The priority of the group on the storefront"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the group"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the group has been edited"
          },
          "category_id": {
            "type": "string",
            "example": "sample....",
            "description": "The category the group is a part of"
          },
          "group_id": {
            "type": "string",
            "example": "sample....",
            "description": "The unique identifyer of the current group"
          }
        }
      },
      "miniInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "recurring_billing_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the recurring bill"
          },
          "billing_period_start": {
            "type": "number",
            "example": 162857125819,
            "description": "The timestamp for when the billing for the invoice started"
          },
          "billing_period_end": {
            "type": "number",
            "example": null,
            "description": "The timestamp for when the billing for the invoice ended"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Invoice type. For subscriptions, the invoice type is PRODUCT_SUBSCRIPTION as SUBSCRIPTION is reserved for Sellix-own plans"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERIALS",
            "description": "Product type"
          },
          "origin": {
            "type": "string",
            "enum": [
              "STOREFRONT",
              "API",
              "EMBED"
            ],
            "example": "STOREFRONT",
            "description": "How the invoice was created"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this invoice belongs"
          },
          "platform_id": {
            "type": "string",
            "example": null,
            "description": "The ID of the wallet platform used during checkout"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "ID of the customer"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product linked to this invoice, if any"
          },
          "product_variants": {
            "type": "object",
            "properties": {
              "{product_id}": {
                "description": "The id of the product the plan belongs to",
                "$ref": "#/components/schemas/product_variant"
              }
            }
          },
          "affiliate_revenue_customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "ID of the customer who is affiliated to the purchase"
          },
          "product_addons": {
            "$ref": "#/components/schemas/product_addons"
          },
          "product_type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERIALS",
            "description": "Product type"
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title"
          },
          "subscription_id": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Unique ID of the subscription purchased"
          },
          "subscription_time": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Time, in seconds, of the subscription purchased"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "gateways_accepted": {
            "$ref": "#/components/schemas/gateways"
          },
          "paypal_apm": {
            "type": "string",
            "example": null,
            "description": "PayPal Alternative Payment Method name, such as iDEAL, used if gateway is PAYPAL"
          },
          "stripe_apm": {
            "type": "string",
            "enum": [
              "afterpay_clearpay",
              "alipay",
              "bancontact",
              "au_becs_debit",
              "boleto",
              "eps",
              "fpx",
              "giropay",
              "grabpay",
              "ideal",
              "klarna",
              "oxxo",
              "p24",
              "sofort",
              "wechat_pay"
            ],
            "example": null,
            "description": "Stripe Alternative Payment Method name, such as iDEAL, used if gateway is STRIPE"
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased"
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 4.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable"
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen"
          },
          "tax_percentage": {
            "type": "number",
            "example": 2,
            "description": "The percentage of tax applied on the transaction"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice"
          },
          "discount_display": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "If a coupon or volume_discount is used, the displayed discount value presents the total amount of discount over the total cost of the invoice"
          },
          "discount_breakdown": {
            "type": "object",
            "example": null,
            "description": "Representation of how discount was applied to invoice"
          },
          "bundle_config": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bundle_config"
            }
          },
          "volume_discount": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "The discount value applied from a volume_discount"
          },
          "volume_discount_display": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "The diplayed discount value applied from a volume_discount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD"
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD"
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer"
          },
          "discord_customer_token": {
            "type": "string",
            "example": null,
            "description": "The oauth access token provided by discord during checkout"
          },
          "discord_customer_refresh_token": {
            "type": "string",
            "example": null,
            "description": "The oauth refresh token provided by discord during checkout"
          },
          "discord_customer_token_expires_at": {
            "type": "number",
            "example": null,
            "description": "Timstamp for the expiration of the discord oauth tokens"
          },"paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email"
          },
          "paypal_email": {
            "type": "string",
            "example": null,
            "description": "Merchant PayPal email"
          },
          "paypal_order_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal order ID"
          },
          "paypal_authorization_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal authorization ID"
          },
          "paypal_capture_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal capture ID"
          },
          "paypal_payer_email": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the PayPal's email used for the purchase"
          },
          "paypal_fee": {
            "type": "string",
            "example": 987,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total"
          },
          "paypal_fee_currency": {
            "$ref": "#/components/schemas/currency"  
          },
          "paypal_api_credentials": {
            "type": "string",
            "example": "10/01/2021",
            "description": "This field contains the API version of PayPal that is used"
          },
          "paypal_subscription_id": {
            "type": "integer",
            "example": null,
            "description": "ID of the paypal subscription"
          },
          "paypal_subscription_link": {
            "type": "integer",
            "example": null,
            "description": "Link for the merchant to purchase the subscription from"
          },
          "lex_order_id": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "lex_payment_method": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "lex_secret": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "virtual_payments_id": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "paydash_paymentID": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "paydash_apiKey": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED"
          },
          "skrill_email": {
            "type": "string",
            "example": null,
            "description": "Merchant Skrill email"
          },
          "skrill_sid": {
            "type": "string",
            "example": null,
            "description": "Skrill unique ID linked to the invoice"
          },
          "skrill_link": {
            "type": "string",
            "example": null,
            "description": "Skrill link to redirect the customer to"
          },
          "stripe_id": {
            "type": "string",
            "example": null,
            "description": "Client ID used to create the STRIPE paymentIntent"
          },
          "stripe_client_secret": {
            "type": "string",
            "example": null,
            "description": "Client secret used to create the STRIPE paymentIntent"
          },
          "stripe_price_id": {
            "type": "string",
            "example": null,
            "description": "If the invoice type is PRODUCT_SUBSCRIPTION or SUBSCRIPTION, refers to the STRIPE price ID"
          },
          "stripe_customer_id": {
            "type": "string",
            "example": null,
            "description": "The ID of the stripe customer the invoice is for"
          },
          "stripe_subscription_id": {
            "type": "string",
            "example": null,
            "description": "If the invoice type is SUBSCRIPTION, refers to the STRIPE subscription ID"
          },
          "stripe_invoice_id": {
            "type": "string",
            "example": null,
            "description": "If the invoice type not is SUBSCRIPTION, refers to the STRIPE invoice ID"
          },
          "perfectmoney_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "PerfectMoney payment ID linked to the invoice"
          },
          "binance_invoice_id": {
            "type": "string",
            "example": null,
            "description": "ID for binance invoice"
          },
          "binance_qrcode": {
            "type": "string",
            "example": null,
            "description": "Full Binance QRCODE string"
          },
          "binance_checkout_url": {
            "type": "string",
            "example": null,
            "description": "Checkout URL for Binance invoice"
          },
          "binance_payout": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether or not the binance invoice was payed out"
          },
          "cashapp_qrcode": {
            "type": "string",
            "example": null,
            "description": "Full CashApp QRCODE string"
          },
          "cashapp_note": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique note for the customer to leave in the CashApp payment"
          },
          "cashapp_cashtag": {
            "type": "string",
            "example": null,
            "description": "CashApp cashtag used to create the QRCODE"
          },
          "crypto_address": {
            "type": "string",
            "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
            "description": "Cryptocurrency address linked to this invoice"
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate"
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer"
          },
          "crypto_fee_paid": {
            "type": "number",
            "example": 1,
            "description": "The amount of money already sent for the crypto transaction's fee"
          },
          "crypto_fee_owed": {
            "type": "number",
            "example": 1,
            "description": "The amount remaining to be paid for the crypto transaction's fee"
          },
          "crypto_uri": {
            "type": "string",
            "example": "solana:3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B?amount=0.014174",
            "description": "URI used to create the QRCODE"
          },
          "bitcoin_ln_r_hash": {
            "type": "string",
            "example": null,
            "description": "The bitcoin lightning r hash if applicable"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice"
          },
          "crypto_wallet_version": {
            "type": "string",
            "example": "07-05-2023",
            "description": "The version of the Sellix Crypto Wallet being used"
          },
          "crypto_payout": {
            "type": "boolean",
            "example": true,
            "description": "If true, an instant payout for this invoice's cryptocurrency address has been sent"
          },
          "crypto_scheduled_payout": {
            "type": "boolean",
            "example": false,
            "description": "If true, a scheduled payout for this invoice's cryptocurrency address has been sent"
          },
          "crypto_payout_type": {
            "type": "string",
            "enum": ["NOT_DEFINED"],
            "example": "NOT_DEFINED",
            "description": "The payout type for the crypto"
          },
          "fee_billed": {
            "type": "boolean",
            "example": true,
            "description": "If true, the Sellix fee_percentage has already been collected"
          },
          "bill_info": {
            "type": "object",
            "example": null,
            "description": "If invoice type is MONTHLY_BILL, contains a breakdown of the fees that need to be collected"
          },
          "country": {
            "type": "string",
            "example": "IT",
            "description": "Customer country"
          },
          "location": {
            "type": "string",
            "example": "Bologna, Emilia-Romagna (Europe/Rome)",
            "description": "Customer location"
          },
          "ip": {
            "type": "string",
            "example": "255.11.12.255",
            "description": "Customer IP"
          },
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, a VPN or Proxy has been detected"
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.26.8",
            "description": "Customer User Agent"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API"
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified"
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent"
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid"
          },
          "payout_configuration": {
            "type": "string",
            "example": "null",
            "description": "DEPRECATED. Value is actually a stringified null"
          },
          "fee_percentage": {
            "type": "integer",
            "example": 5,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees"
          },
          "fee_breakdown": {
            "$ref": "#/components/schemas/fee_breakdown"
          },
          "to_process": {
            "type": "number",
            "example": 0,
            "description": "Amount of money left to process"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice"
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock"
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set"
          },
          "environment": {
            "type": "string",
            "enum": [
              "PRODUCTION"
            ],
            "example": "PRODUCTION",
            "description": "The environment the invoice was made under"
          },"day_value": {
            "type": "integer",
            "example": 28,
            "description": "Day value, number"
          },
          "day": {
            "type": "string",
            "example": "Fri",
            "description": "First three letters of the day name"
          },
          "month": {
            "type": "string",
            "example": "Feb",
            "description": "First three letters of the month name"
          },
          "year": {
            "type": "integer",
            "example": "1975",
            "description": ": Year number"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the invoice"
          },
          "gateway_updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": null,
            "description": "Timestamp, available of the last time the gateway has been updated"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the invoice"
          },
          "is_marketplace": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether or not the invoice was created from a marketplace"
          },
          "square_payment_id": {
            "type": "string",
            "example": null,
            "description": "Payment ID for the squarespace payment method"
          },
          "volume_payment_id": {
            "type": "string",
            "example": null,
            "description": "The payment ID for the volume payment gateway"
          },
          "volume_reference_id": {
            "type": "string",
            "example": null,
            "description": "The reference ID for the volume payment gateway"
          },
          "product_plan_id": {
            "type": "integer",
            "example": null,
            "description": "The internal ID of the Sellix product plan associated to the subscription 2.0 product"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "Name of the merchant"
          },
          "shop_paypal_credit_card": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled purchase with Credit Card through PayPal"
          },
          "shop_force_paypal_email_delivery": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled invoice shipment to the PayPal customer email"
          }
        }
      },
      "miniProduct": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "price": {
            "type": "string",
            "example": "4.00",
            "description": "Product price"
          },
          "price_display": {
            "type": "string",
            "example": "5.00",
            "description": "Product price in currency"
          },
          "price_discount": {
            "type": "number",
            "example": 1,
            "description": "The discount price on the purchased goods"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "unlisted": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the product is shown on the storefront"
          },
          "title": {
            "type": "string",
            "example": "Digital good to download",
            "description": "The title of the product"
          },
          "image_attachment": {
            "type": "string",
            "example": "8028e4db21744421e9645ed2abef4d303fd16a30fd4bb32f580d7a615ef6e0c7",
            "description": "DEPRECATED: Unique id of the image attachment for this product"
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "The description of the product"
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product"
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product"
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SERVICE",
            "description": "Product type"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this resource belongs"
          },
          "gateways": {
            "type": "string",
            "example": "STRIPE,PAYPAL,CASH_APP,BITCOIN,LITECOIN,ETHEREUM,BITCOIN_CASH",
            "description": "A list of gateways available on this product"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted"
          },
          "private": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the product is private and cannot be purchased"
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product"
          },
          "on_hold": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the product is on hold and purchaseable"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the product"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited"
          },
          "product_id": {
            "type": "string",
            "example": "sample....",
            "description": "The uniqid of the product"
          },
          "group_id": {
            "type": "string",
            "example": "sample....",
            "description": "If the product is in a group, this is the group_id of that group"
          },
          "average_score": {
            "type": "string",
            "example": "5.0000",
            "description": "The average rating of the product"
          }
        }
      },
      "payment_method": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 29,
            "description": "Internal Sellix ID for the resource"
          },
          "uniqid": {
            "type": "string",
            "example": "pm_....",
            "description": "Unique identifier used throughout Sellix's API"
          },
          "title": {
            "type": "string",
            "example": "Credit Card, Diners club, **** **** **** 0004",
            "description": "The title of the stored payment method"
          },
          "system_title": {
            "type": "string",
            "example": "Credit Card, Diners club, **** **** **** 0004",
            "description": "The title of the stored payment method used by our system"
          },
          "shop_id": {
            "type": "integer",
            "example": 433811,
            "description": "ID of the Sellix shop the customer was created for"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "Unique ID used within Sellix to identify customers across the API"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Payment gateway this payment method is used for"
          },
          "method_type": {
            "type": "string",
            "enum": ["CARD"],
            "example": "CARD",
            "description": "The type of payment method used within the gateway"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE"],
            "example": "ACTIVE",
            "description": "The status of the payment method"
          },
          "last_confirm_date": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730317834,
            "description": "The last time the payment method was used stored as a timestamp"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730317834,
            "description": "When the payment method was saved for future reuse stored as a timestamp"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730317834,
            "description": "When the payment method was last updated stored as a timestamp"
          }
        }
      },
      "payment_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "url",
              "uniqid"
            ],
            "properties": {
              "url": {
                "type": "string",
                "example": "https://sellix.io/payment/sample-....-....",
                "description": "Sellix hosted payment page"
              },
              "uniqid": {
                "type": "string",
                "format": "uuid",
                "example": "sample-....-....",
                "description": "Unique ID of the invoice created for the payment"
              },
              "url_branded": {
                "type": "string",
                "example": "https://storename.mysellix.io/invoice/sample-....-....",
                "description": "Sellix hosted payment page with url unique to your shop"
              }
            }
          },
          "error": {
            "type": "string",
            "example": null
          },
          "message": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          },
          "log": {
            "type": "object",
            "example": null
          }
        }
      },
      "payment_response_white_label": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "invoice"
            ],
            "properties": {
              "invoice": {
                "$ref": "#/components/schemas/invoice"
              }
            },
            "example": {
              "invoice": {
                "uniqid": "sample-....-....",
                ".": null
              }
            }
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "log": {
            "type": "object",
            "example": null
          },
          "error": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          }
        }
      },
      "paypal_dispute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "PP-D-sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice linked to this dispute"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this paypal dispute belongs"
          },
          "reason": {
            "type": "string",
            "enum": [
              "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
              "INCORRECT_AMOUNT",
              "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
              "PAYMENT_BY_OTHER_MEANS",
              "UNAUTHORISED",
              "CANCELED_RECURRING_BILLING",
              "CREDIT_NOT_PROCESSED",
              "PROBLEM_WITH_REMITTANCE",
              "DUPLICATE_TRANSACTION",
              "OTHER"
            ],
            "example": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
            "description": "The dispute reason is why the customer has opened a dispute against your order"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "UNDER_REVIEW",
              "WAITING_FOR_BUYER_RESPONSE",
              "RESOLVED",
              "WAITING_FOR_SELLER_RESPONSE",
              "OTHER"
            ],
            "example": "WAITING_FOR_BUYER_RESPONSE",
            "description": "Each dispute is automatically updated when we receive an update from PayPal, the status indicates how it is going"
          },
          "outcome": {
            "type": "string",
            "enum": [
              "RESOLVED_BUYER_FAVOUR",
              "CANCELED_BY_BUYER",
              "RESOLVED_SELLER_FAVOUR",
              "ACCEPTED",
              "RESOLVED_WITH_PAYOUT",
              "DENIED",
              "NONE"
            ],
            "example": null,
            "description": "When a dispute it’s solved, its outcome is updated"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paypal_dispute_message"
            },
            "example": [
              {
                "posted_by": "SELLER",
                "content": "Hello your order is completed",
                "created_at": 1641033844
              }
            ]
          },
          "life_cycle_stage": {
            "type": "string",
            "enum": [
              "INQUIRY",
              "ARBITRATION",
              "CHARGEBACK",
              "PRE_ARBITRATION"
            ],
            "example": "INQUIRY",
            "description": "The stage in the dispute lifecycle"
          },
          "seller_response_due_date": {
            "type": "integer",
            "format": "timestamp",
            "example": 987,
            "description": "Within which date the seller needs to respond"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the dispute"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "When the dispute was updated"
          }
        }
      },
      "paypal_dispute_message": {
        "type": "object",
        "properties": {
          "posted_by": {
            "type": "string",
            "enum": [
              "BUYER",
              "ARBITER",
              "SELLER"
            ],
            "example": "SELLER",
            "description": "Indicates whether the customer, merchant, or dispute arbiter posted the message"
          },
          "content": {
            "type": "string",
            "example": "Hello your order is completed",
            "description": "The content of the dispute message"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for when the message was sent"
          }
        }
      },
      "product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "slug": {
            "type": "string",
            "example": "digital-good-to-download",
            "description": "The slug used to navigate to the product page on a storefront"
          },
          "shop_id": {
            "type": "number",
            "example": 987,
            "description": "The shop ID to which this resource belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "example": "SUBSCRIPTION",
            "description": "Product type"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS"
            ],
            "example": null,
            "description": "Product subtype, can be used only with type SUBSCRIPTION"
          },
          "title": {
            "type": "string",
            "example": "Digital good to download",
            "description": "Product title"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "pay_what_you_want": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not pay-what-you-want pricing is enabled"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 4.00,
            "description": "Product price"
          },
          "price_display": {
            "type": "number",
            "format": "double",
            "example": 5.00,
            "description": "Product price in currency"
          },
          "price_discount": {
            "type": "number",
            "format": "double",
            "example": 1.00,
            "description": "The discount price on the purchased goods"
          },
          "affiliate_revenue_percent": {
            "type": "number",
            "example": 15,
            "description": "The percentage of revenue to give to affiliates. -1 for disabled, 0 for default (10%), other number for a custom percent"
          },
          "price_variants": {
            "type": "object",
            "example": null,
            "description": "Variants in pricing for the product"
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "Product description"
          },
          "licensing_enabled": {
            "type": "integer", 
            "enum": [0, 1],
            "example": 1,
            "description": "Whether product licenses are generated on successful payments"
          },
          "license_period": {
            "type": "integer",
            "example": 7,
            "description": "Amount in days that licenses will be valid for"
          },
          "image_attachment": {
            "$ref": "#/components/schemas/image_attachment"
          },
          "file_attachment": {
            "type": "string",
            "example": null,
            "description": "Unique id of the file attachment for this product if the product type is FILE"
          },
          "youtube_link": {
            "type": "string",
            "example": "https://www.youtube.com/example",
            "description": "The url for the YouTube video of the product"
          },
          "volume_discounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "PERCENTAGE",
                    "FIXED"
                  ],
                  "example": "PERCENTAGE",
                  "description": "Whether the discount value is a percentage or a fixed amount"
                },
                "value": {
                  "type": "integer",
                  "example": 5,
                  "description": "Value of a percentage or fixed discount"
                },
                "quantity": {
                  "type": "integer",
                  "example": 10,
                  "description": "How much of this product needs to be purchased in order to be eligible for this volume discount"
                }
              }
            },
            "description": "Array of volume discounts"
          },
          "recurring_interval": {
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "example": "MONTH",
            "description": "At which frequency the customer is billed for product type SUBSCRIPTION"
          },
          "recurring_interval_count": {
            "type": "integer",
            "example": 1,
            "description": "How many recurring_interval before the customer is billed for product type SUBSCRIPTION"
          },
          "trial_period": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Defines a trial period before billing the customer for product type SUBSCRIPTION. Will be null if product is not a subsription"
          },
          "setup_cost": {
            "type": "string",
            "example": "0.000000000000",
            "description": "If the product is a subcription, this is the setup cost of the subscription"
          },
          "paypal_product_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal product is automatically created on the connected account"
          },
          "paypal_plan_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal plan is automatically created on the connected account"
          },
          "stripe_price_id": {
            "type": "string",
            "example": "price_....",
            "description": "When a product SUBSCRIPTION is created and the gateway STRIPE chosen, a Stripe price is automatically created on the connected account"
          },
          "discord_integration": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the discord integeration is enabled for this product"
          },
          "discord_optional": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the discord integration is optional"
          },
          "discord_set_role": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether to give users a role when added to the discord server"
          },
          "discord_server_id": {
            "type": "string",
            "example": "742768752180854827",
            "description": "The id of the discord server the bot will add users to"
          },
          "discord_role_id": {
            "type": "number",
            "example": "742772275698335765",
            "description": "The role to give users when added by the discord integration"
          },
          "discord_remove_role": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether to remove a role from the user when added to the discord server"
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product"
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product"
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant"
          },
          "gateways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gateway"
            },
            "example": ["PAYPAL", "STRIPE", "BITCOIN"]
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "rcon_commands": {
            "type": "string",
            "example": "[\"say hi\", \"say hi\"]",
            "description": "Stringified array of the commands to be executed on the RCON server"
          },
          "rcon_execution_type": {
            "type": "string",
            "enum": ["AUTOMATIC", "MANUAL"],
            "example": "AUTOMATIC",
            "description": "The type of execution for the RCON commands. Only applies to RCON products"
          },
          "rcon_start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-20 00:00:00",
            "description": "The time for when the RCON product should start"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted"
          },
          "max_risk_level": {
            "type": "integer",
            "example": 85,
            "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts"
          },
          "block_vpn_proxies": {
            "type": "boolean",
            "example": true,
            "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE"
          },
          "delivery_text": {
            "type": "string",
            "example": "Thank you for purchasing this subscription!",
            "description": "The text to be delivered to the customer after payment"
          },
          "delivery_time": {
            "type": "integer",
            "example": 162857125819,
            "description": "The timestamp for when the invoice was delivered"
          },
          "service_text": {
            "type": "string",
            "example": "In order to get you services, please contact us at",
            "description": "The text to be delivered to the customer after payment for a service"
          },
          "stock_delimiter": {
            "type": "string",
            "example": ",",
            "description": "How to delimit the stock if product type is SERIALS, for example with stock_delimiter \",\" and serials value first,second; the stock would have two different serials \"first\" and \"second\""
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock"
          },
          "dynamic_webhook": {
            "type": "object",
            "example": null
          },
          "bestseller": {
            "type": "number",
            "example": 0,
            "description": "DEPRECATED"
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product"
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "If unlisted is true, the product is not shown in the storefront but can be bought through a direct link"
          },
          "on_hold": {
            "type": "boolean",
            "example": false,
            "description": "If on_hold is true, the product cannot be bought but is shown in the storefront"
          },
          "terms_of_service": {
            "type": "string",
            "example": null,
            "description": "Text containing the product's terms of service"
          },
          "warranty": {
            "type": "integer",
            "example": 86400,
            "description": "Time, in seconds, of how much the warranty for this product lasts"
          },
          "warranty_text": {
            "type": "string",
            "example": "This warranty covers",
            "description": "Clear explanation of what the warranty covers"
          },
          "watermark_enabled": {
            "type": "number",
            "example": 1,
            "description": "Whether sellix should add a watermark to your product image"
          },
          "watermark_text": {
            "type": "string",
            "example": "Sellix",
            "description": "The watermark to add to the product image"
          },
          "redirect_link": {
            "type": "string",
            "example": "https://sellix.io",
            "description": "The url to redirect a customer to on successful payment"
          },
          "label_singular": {
            "type": "string",
            "example": null
          },
          "label_plural": {
            "type": "string",
            "example": null
          },
          "private": {
            "type": "boolean",
            "example": false,
            "description": "If private is true, the product is hidden on the storefront and cannot be bought with a direct link"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the product"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the product"
          },
          "marketplace_category_id": {
            "type": "string",
            "example": 0,
            "description": "The category ID the product is a part of"
          },
          "telegram_group_id": {
            "type": "string",
            "example": "none",
            "description": "The Telegram group ID"
          },
          "telegram_integration": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the Telegram integration is enabled"
          },
          "telegram_optional": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the Telegram integration is optional"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the product"
          },
          "image_name": {
            "type": "string",
            "example": "350f4d83d59450404ad3fca36e9337236df3697dd9149863682d88c32503230a.jpeg",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "type": "string",
            "example": "db1fe49f-4492-4e82-9001-9fad57555c00",
            "description": "The ID of the image stored in cloudflare's CDN"
          },
          "image_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/image_attachment"
            }
          },
          "feedback": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 10,
                "description": "Count of all the feedback"
              },
              "positive": {
                "type": "integer",
                "example": 8,
                "description": "Count of positive feedback"
              },
              "neutral": {
                "type": "integer",
                "example": 1,
                "description": "Count of neutral feedback"
              },
              "negative": {
                "type": "integer",
                "example": 1,
                "description": "Count of negative feedback"
              },
              "numbers": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                },
                "example": {
                  "5": 6,
                  "4": 2,
                  "3": 1,
                  "1": 1
                }
              },
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "example": 5
                    },
                    "message": {
                      "type": "string",
                      "example": "Nice product!"
                    },
                    "reply": {
                      "type": "string",
                      "example": "Thank you for the feedback"
                    },
                    "created_at": {
                      "type": "integer",
                      "format": "timestamp",
                      "example": 162857125819,
                      "description": "Timestamp for the creation of the feedback"
                    },
                    "updated_at": {
                      "type": "number",
                      "example": 162857125819
                    }
                  }
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Test Category",
                  "description": "The title of the category"
                },
                "uniqid": {
                  "type": "string",
                  "example": "sample....",
                  "description": "The unique id of the category"
                }
              }
            }
          },
          "payment_gateways_fees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Internal ID of the resource"
                },
                "shop_id": {
                  "type": "integer",
                  "example": 987,
                  "description": "The shop ID to which this resource belongs"
                },
                "gateway": {
                  "$ref": "#/components/schemas/gateway",
                  "description": "Payment gateway this payment method is used for"
                },
                "percent_amount": {
                  "type": "integer",
                  "example": -5
                },
                "fixed_amount": {
                  "type": "integer",
                  "example": 0
                },
                "fixed_currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "active_type": {
                  "type": "string",
                  "enum": ["PERCENT", "FIXED"],
                  "example": "null",
                  "description": "DEPRECATED"
                },
                "updated_at": {
                  "type": "string",
                  "example": "1970-01-01 00:00:00"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1975-02-28 00:00:00",
                  "description": "Datetime for the creation of the resource"
                }
              }
            }
          },
          "price_conversions": {
            "type": "object", 
            "properties": {
              "AUD": {
                "type": "number",
                "example": 92.08,
                "description": "The price of the product variant in AUD"
              },
              "BGN": {
                "type": "number",
                "example": 108.62,
                "description": "The price of the product variant in BGN"
              },
              "BRL": {
                "type": "number",
                "example": 300.17,
                "description": "The price of the product variant in BRL"
              },
              "ZAR": {
                "type": "number",
                "example": 1143.49,
                "description": "The price of the product variant in ZAR"
              },
              "crypto": {
                "type": "object",
                "properties": {
                  "APE": {
                    "type": "string",
                    "example": "31.0607029506",
                    "description": "The price of the product variant in APE"
                  },
                  "BCH": {
                    "type": "string",
                    "example": "0.1271212408",
                    "description": "The price of the product variant in BCH"
                  },
                  "BNB": {
                    "type": "string",
                    "example": "0.1067436987",
                    "description": "The price of the product variant in BNB"
                  },
                  "USDC_NATIVE": {
                    "type": "string",
                    "example": "60.0000000000",
                    "description": "The price of the product variant in USDC_NATIVE"
                  }
                },
                "description": "A list of the price of the product variant in various cryptocurrencies"
              }
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product_addons"
            }
          },
          "country_regulations": {
            "type": "string",
            "example": "IT",
            "description": "The country ISO code that the business is located in"
          },
          "available_stripe_apm": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "afterpay_clearpay"
              },
              "name": {
                "type": "string",
                "example": "Afterpay and Clearpay"
              }
            }
          },
          "serials": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "webhooks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "theme": {
            "type": "string",
            "example": "dark",
            "description": "The current theme enabled on the Sellix storefront"
          },
          "dark_mode": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not dark mode is enabled on the Sellix storefront"
          },
          "ui_style_configuration": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the UI style configuration is enabled on the Sellix storefront"
          },
          "vat_percentage": {
            "type": "string",
            "example": "0.00",
            "description": "The VAR percentage set for the store"
          },
          "tax_details": {
            "type": "object",
            "properties": {
              "vat_percentage": {
                "type": "string",
                "example": "0.00"
              },
              "tax_configuration": {
                "type": "string",
                "example": "NONE"
              },
              "tax_configuration_data": {
                "type": "array",
                "example": [],
                "items": {
                  "type": "string"
                }
              },
              "display_tax_on_storefront": {
                "type": "integer",
                "enum": [0, 1],
                "example": 0
              },
              "display_tax_custom_fields": {
                "type": "integer",
                "enum": [0, 1],
                "example": 0
              },
              "validation_only_for_companies": {
                "type": "integer",
                "enum": [0, 1],
                "example": 1
              },
              "validate_vat_number": {
                "type": "integer",
                "enum": [0, 1],
                "example": 0
              },
              "prices_tax_inclusive": {
                "type": "integer",
                "enum": [0, 1],
                "example": 0
              }
            }
          },
          "image_attachment_info": {
            "$ref": "#/components/schemas/image_attachment"
          },
          "average_score": {
            "type": "string",
            "example": "5.0000",
            "description": "The average rating of the product"
          },
          "sold_count": {
            "type": "number",
            "example": 236,
            "description": "The amount of sales for the product"
          }
        }
      },
      "product_addons": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1,
              "description": "Internal ID of the resource"
            },
            "uniqid": {
              "type": "string",
              "example": "sample....",
              "description": "Unique id of the resouce. The id for external usage through the API"
            },
            "shop_id": {
              "type": "integer",
              "example": 987,
              "description": "The shop ID to which this addon belongs"
            },
            "product_types": {
              "type": "array",
              "example": null,
              "items": {
                "type": "string"
              },
              "description": "The product types for the product addon"
            },
            "title": {
              "type": "string",
              "example": "Sellix",
              "description": "The title of the product addon"
            },
            "description": {
              "type": "string",
              "example": "A Sellix product description",
              "description": "The description of the product addon"
            },
            "price": {
              "type": "string",
              "example": "1.00",
              "description": "The price of the product addon"
            },
            "currency": {
              "$ref": "#/components/schemas/currency"
            }
          }
        }
      },
      "product_download": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice this download is linked to"
          },
          "customer_ip": {
            "type": "string",
            "example": "182.219.207.39",
            "description": "The IP of the customer that downloaded the product"
          },
          "customer_isp": {
            "type": "string",
            "example": "WINDTRE",
            "description": "The ISP of the customer that downloaded the product"
          },
          "customer_timezone": {
            "type": "string",
            "example": "GMT+1",
            "description": "The timezone of the customer that downloaded the product"
          },
          "customer_country": {
            "type": "string",
            "example": "IT",
            "description": "The country of the customer that downloaded the product"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp, available if the download has been created"
          }
        }
      },
      "product_plan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "description": "The unique identifier for the payment plan",
            "example": "pp_...."
          },
          "shop_id": {
            "type": "integer",
            "description": "The shop ID to which this resource belongs",
            "example": 987
          },
          "product_id": {
            "type": "integer",
            "description": "ID of the product subscription",
            "example": "sample...."
          },
          "status": {
            "type": "string",
            "enum": ["PENDING","COMPLETED", "CANCELED", "AWAIT_CANCELING", "ACTIVE"],
            "description": "The status of the subscription",
            "example": "ACTIVE"
          },
          "stock": {
            "type": "integer",
            "description": "The stock of the subscription plan",
            "example": -1
          },
          "dynamic_webhook": {
            "type": "string",
            "description": "DEPRECATED: The webhook to be sent for events related to thsi product",
            "example": ""
          },
          "service_text": {
            "type": "string",
            "description": "The service text to be delievered upon delivery (it product type is SERVICE)",
            "example": ""
          },
          "title": {
            "type": "string",
            "description": "The title of the plan",
            "example": "Custom Title"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price of the subscription plan",
            "example": 5
          },
          "price_discount": {
            "type": "number",
            "format": "float",
            "description": "The default discount applied to this plan",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "The description for the subscription plan",
            "example": "Plan description"
          },
          "trial_period": {
            "type": "integer",
            "enum": [0, 1],
            "description": "Whether a trial period is enabled for the subscription plan. Will be null if product is not a subscription",
            "example": 0
          },
          "recurring_interval": {
            "type": "string",
            "enum": ["DAY", "WEEK", "MONTH", "YEAR"],
            "description": "How often the customer should be invoiced for the subscription",
            "example": "MONTH"
          },
          "recurring_interval_count": {
            "type": "integer",
            "description": "How many times the customer should be invoiced per interval",
            "example": 1
          },
          "payment_type": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS"],
            "description": "When the customer will be billed for the subscription",
            "example": "ADVANCE"
          },
          "renew_type": {
            "type": "string",
            "enum": ["CALENDAR", "ANNIVERSARY"],
            "description": "How subscription renewals should be handled",
            "example": "CALENDAR"
          },
          "billing_type": {
            "type": "string",
            "enum": ["FULL", "PRORATED"],
            "description": "How customers should be billed for the subscription if they purchase through the interval",
            "example": "FULL"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the subscription plan was created",
            "example": 1727735926
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the subscription plan was last updated",
            "example": 1727735926
          },
          "product_currency": {
            "type": "string",
            "description": "Default currency for the subscription product",
            "example": "USD"
          },
          "product_stock": {
            "type": "integer",
            "description": "The stock of the subscription plan",
            "example": -1
          },
          "product_type": {
            "type": "string",
            "enum": [
              "INFO_CARD",
              "SERVICE",
              "DYNAMIC",
              "FILE",
              "SERIALS",
              "GAMING_RCON",
              "SUBSCRIPTION",
              "SUBSCRIPTION_V2"
            ],
            "description": "The type of the product",
            "example": "SUBSCRIPTION_V2"
          },
          "product_subtype": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION"
            ],
            "example": null
          },
          "real_stock": {
            "type": "integer",
            "description": "The real stock of the subscription plan",
            "example": -1
          },
          "price_conversions": {
            "type": "object",
            "description": "Price conversions for supported currencies",
            "properties": {
              "USD": {
                "type": "number",
                "format": "float",
                "example": 5
              },
              "CAD": {
                "type": "number",
                "format": "float",
                "example": 6.82
              },
              "crypto": {
                "type": "object",
                "properties": {
                  "BTC": {
                    "type": "string",
                    "example": "0.0000792735"
                  },
                  "DOGE": {
                    "type": "string",
                    "example": "45.3345736873"
                  }
                }
              }
            }
          }
        }
      },
      "payment_interval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "pay_int_....",
            "description": "Unique id for the payment interval; used throughout Sellix's API"
          },
          "product_subscription_id": {
            "type": "integer",
            "example": 50,
            "description": "Internal ID for the product subscription"
          },
          "product_plan_subscription_id": {
            "type": "integer",
            "example": 74,
            "description": "Internal ID for the subscription's product plan"
          },
          "invoice_uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the invoice created for the payment interval"
          },
          "prev_payment_interval_id": {
            "type": "integer",
            "example": 0,
            "description": "Internal ID for the previous payment interval"
          },
          "idx": {
            "type": "integer",
            "example": 1,
            "description": "The index of the payment interval"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-17 14:09:41",
            "description": "The time for when the payment interval started"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-18 14:09:40",
            "description": "The time for when the payment interval ended"
          },
          "interval_type": {
            "type": "string",
            "enum": ["PAYMENT"],
            "example": "PAYMENT",
            "description": "The type of interval"
          },
          "payment_type": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS"],
            "example": "ADVANCE",
            "description": "The billing type of the payment interval"
          },
          "payment_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-17 14:09:41",
            "description": "The time for when the payment was made"
          },
          "payment_attempts": {
            "type": "integer",
            "example": 0,
            "description": "The number of payment attempts"
          },
          "last_payment_attempt_date": {
            "type": "string",
            "format": "date-time",
            "example": null,
            "description": "The time for the last payment attempt"
          },
          "last_payment_details": {
            "type": "object",
            "example": null,
            "description": "Payment details for the last payment"
          },
          "next_payment_attempt_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-17 14:09:41",
            "description": "The time for the next payment interval"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "ACTIVE", "AWAIT_CANCELING", "CANCELED", "COMPLETED"],
            "example": "PENDING",
            "description": "The status of the payment interval"
          },
          "used_coupons": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string"
            },
            "description": "Coupons used for the payment interval"
          },
          "used_customer_balance": {
            "type": "number",
            "format": "double",
            "example": 0,
            "description": "The amount of customer balance used for the payment interval"
          },
          "used_customer_balance_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "used_addons": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string"
            },
            "description": "Addons used for the payment interval"
          },
          "trial_ending_email_sent": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the trial ending email has been sent"
          },
          "upcoming_renewal_email_sent": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the upcoming renewal email has been sent"
          },
          "start_event_processed": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether or not the start event has been processed"
          },
          "end_event_processed": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the end event has been processed"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-18 14:11:07",
            "description": "The timestamp for when the payment interval was completed"
          },
          "next_interval_info": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["PAYMENT"],
                "example": "PAYMENT",
                "description": "The type of interval"
              },
              "end_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-10 23:59:59",
                "description": "The timestamp for when the payment interval ended"
              },
              "start_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-07 00:00:00",
                "description": "The timestamp for when the payment interval started"
              },
              "payment_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-07 00:00:00",
                "description": "The timestamp for when the payment was made"
              },
              "payment_type": {
                "type": "string",
                "enum": ["TRIAL", "PAYMENT"],
                "example": "PAYMENT",
                "description": "The type of interval this is"
              }
            }
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730668597,
            "description": "The timestamp for when the payment interval was created"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730668609,
            "description": "The timestamp for when the payment interval was last updated"
          },
          "auto_charge_block": {
            "type": "integer",
            "example": null,
            "description": "The number of days before the payment interval is charged"
          },
          "invoice_status": {
            "type": "string",
            "enum": ["PENDING", "COMPLETED", "VOIDED", "WAITING_FOR_CONFIRMATIONS", "PARTIAL", "CUSTOMER_DISPUTE_ONGOING", "REVERSED", "REFUNDED", "WAITING_SHOP_ACTION", "PROCESSING"],
            "example": "COMPLETED",
            "description": "The status of the invoice"
          },
          "invoice_gateway": {
            "$ref": "#/components/schemas/gateway"
          },
          "shop_id": {
            "type": "integer",
            "example": 433811,
            "description": "ID of the Sellix shop the payment interval was created for"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "Unique ID used within Sellix to identify customers across the API"
          },
          "payment_method_id": {
            "type": "integer",
            "example": 38,
            "description": "Internal Sellix ID for the payment method"
          },
          "plan_subscription_gateway": {
            "$ref": "#/components/schemas/gateway"
          },
          "product_id": {
            "type": "integer",
            "example": 1277206,
            "description": "Internal Sellix ID for the product"
          },
          "product_uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product"
          },
          "product_auto_payment_method_required": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the product requires an auto payment method"
          }
        }
      },
      "product_plan_request": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the plan",
            "example": "Plan #5"
          },
          "price": {
            "type": "string",
            "format": "float",
            "description": "The price of the subscription plan",
            "example": "5"
          },
          "price_discount": {
            "type": "number",
            "format": "float",
            "description": "The default discount applied to this plan as a percent",
            "example": 5
          },
          "description": {
            "type": "string",
            "description": "The description for the subscription plan",
            "example": "Plan description"
          },
          "trial_period": {
            "type": "string",
            "description": "The trial period of the subscription plan in days",
            "example": "5"
          },
          "recurring_interval": {
            "type": "string",
            "enum": ["DAY", "WEEK", "MONTH", "YEAR"],
            "description": "The recurring interval type. How often the customer should be invoiced for the subscription",
            "example": "MONTH"
          },
          "recurring_interval_count": {
            "type": "string",
            "description": "Count of days, weeks, months or years in each subscription's billing period",
            "example": "5"
          },
          "payment_type": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS"],
            "description": "When the customer will be billed for the subscription. ADVANCE — payment will happen on the first day of the period; ARREARS - payment will happen on the last day of the period",
            "example": "ADVANCE"
          },
          "renew_type": {
            "type": "string",
            "enum": ["CALENDAR", "ANNIVERSARY"],
            "description": "How subscription renewals should be handled. CALENDAR - payment will happen on the first day of the period (Monday for WEEK, 1st day for MONTH, January 1st for YEAR); ANNIVERSARY - payment will happen on the same day for all invoices (if subscription was created on March 14th, payment will happen on the 14th of each month (if interval is MONTH))",
            "example": "CALENDAR"
          },
          "billing_type": {
            "type": "string",
            "enum": ["FULL", "PRORATED"],
            "description": "How customers should be billed for the subscription if they purchase through the interval. FULL - full price will be invoiced even if only one day left in subscription period; PRORRATED - price will be prorated to used pariod part. If only 50% of the period is left, invoice's total will be 50%",
            "example": "FULL"
          },
          "serials": {
            "type": "string",
            "description": "UNIMPLEMENTED"
          },
          "service_text": {
            "type": "string",
            "description": "UNIMPLEMENTED"
          },
          "dynamic_webhook": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "stock": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "file": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "file_uniqid": {
            "type": "string",
            "description": "DEPRECATED"
          }
        }
      },
      "product_plan_subscription": {
        "type": "object",
        "properties": {
          "shop_id": {
            "type": "integer",
            "example": 433811,
            "description": "The internal shop ID to which this resource belongs"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "The ID of the customer who purchased the subscription plan"
          },
          "product_subscription_uniqid": {
            "type": "string",
            "example": "sub_....",
            "description": "The unique ID of the subscription plan"
          },
          "product_id": {
            "type": "integer",
            "example": 987,
            "description": "The internal ID of the subscription product"
          },
          "product_uniqid": {
            "type": "string",
            "example": "sample....",
            "description": "The external ID of the subscription product"
          },
          "product_plan_uniqid": {
            "type": "string",
            "example": "pp_....",
            "description": "The external ID of the subscription product plan"
          },
          "id": {
            "type": "integer",
            "example": 74,
            "description": "The internal ID of the subscription plan"
          },
          "uniqid": {
            "type": "string",
            "example": "sub_pp_....",
            "description": "The unique ID of the subscription plan"
          },
          "product_subscription_id": {
            "type": "integer",
            "example": 50,
            "description": "The internal ID of the product subscription"
          },
          "product_plan_id": {
            "type": "integer",
            "example": 132,
            "description": "The internal ID of the product plan"
          },
          "payment_interval_id": {
            "type": "integer",
            "example": 79,
            "description": "The internal ID of the payment interval"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING","COMPLETED", "CANCELED", "AWAIT_CANCELING", "ACTIVE"],
            "example": "PENDING",
            "description": "The status of the subscription"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-17 16:41:01",
            "description": "The date-time object of the subscription start date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-17 16:45:23",
            "description": "The date-time object of the subscription end date"
          },
          "payment_method_id": {
            "type": "integer",
            "example": 38,
            "description": "The internal ID of the payment method"
          },
          "origin": {
            "type": "string",
            "enum": [
              "STOREFRONT",
              "API"
            ],
            "example": "STOREFRONT",
            "description": "How the invoice was created"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "The gateway used for invoicing the subscription"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "blockchain": {
            "$ref": "#/components/schemas/blockchain"
          },
          "paypal_apm": {
            "type": "string",
            "example": null,
            "description": "PayPal Alternative Payment Method name, such as iDEAL, used if gateway is PAYPAL"
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the invoices will be sent to PayPal email"
          },
          "stripe_apm": {
            "type": "string",
            "enum": [
              "afterpay_clearpay",
              "alipay",
              "bancontact",
              "au_becs_debit",
              "boleto",
              "eps",
              "fpx",
              "giropay",
              "grabpay",
              "ideal",
              "klarna",
              "oxxo",
              "p24",
              "sofort",
              "wechat_pay"
            ],
            "example": null,
            "description": "Stripe Alternative Payment Method name, such as iDEAL, used if gateway is STRIPE"
          },
          "lex_payment_method": {
            "type": "string",
            "description": "DEPRECATED: If gateway is LEX_HOLDINGS_GROUP, method to be used for the customer to pay",
            "deprecated": true
          },
          "coupon_id": {
            "type": "string",
            "description": "If a coupon has been applied, its ID",
            "example": null
          },
          "product_addons": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },

          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API"
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified"
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent"
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid"
          },
          "developer_confirmations": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the invoice has received developer confirmation"
          },
          "developer_value": {
            "type": "integer",
            "example": 0,
            "description": "Arbitraty value set for development"
          },
          "payment_link_id": {
            "type": "string",
            "example": null,
            "description": "Identifier for the payment link used to pay this invoice"
          },
          "is_marketplace": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the purchase was made in a Sellixmarketplace"
          },
          "payout_confirmation": {
            "type": "object",
            "example": null
          },
          "gateways_accepted": {
            "type": "string",
            "example": "STRIPE,PAYPAL",
            "description": "Comma separated list of gateways accepted for this invoice"
          },
          "tax_data": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "example": "Poland",
                "description": "The country name"
              },
              "country_code": {
                "type": "string",
                "example": "PL",
                "description": "The 2 letter ISO code for the country"
              }
            }
          },
          "discord_id": {
            "type": "string",
            "example": null,
            "description": "ID of the discord account linked to the purchase at checkout"
          },
          "discord_customer_token": {
            "type": "string",
            "example": null,
            "description": "Oauth access token for the linked discord account"
          },
          "discord_customer_refresh_token": {
            "type": "string",
            "example": null,
            "description": "Oauth refresh token used to extend access to the linked discord account"
          },
          "discord_customer_token_expires_at": {
            "type": "integer",
            "format": "timestamp",
            "example": null,
            "description": "Expiration timestamp for the discord customer oauth access"
          },
          "discord_integration_removed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the discord integration for the product has been removed"
          },
          "telegram_user_id": {
            "type": "string",
            "example": null,
            "description": "ID of the telegram account linked to the purchase at checkout"
          },
          "telegram_group_id": {
            "type": "string",
            "example": null,
            "description": "ID of the telegram group the account should be added to after payment confirmation"
          },
          "telegram_integration_removed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the telegram integration for the product has been removed"
          },
          "affiliate_revenue_customer_id": {
            "type": "string",
            "example": null,
            "description": "The ID fo the customer who receives affiliate revenue from this purchase"
          },
          "affiliate_revenue_used": {
            "type": "integer",
            "example": 0,
            "description": "The amount of affiliate revenue used"
          },
          "affilitae_revenue_used_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "affiliate_revenue_used_type": {
            "type": "string",
            "enum": ["ONETIME_FULL", "ONETIME_LIMIT", "REPEAT_FULL", "REPEAT_LIMIT"],
            "example": "REPEAT_LIMIT",
            "description": "The type of affiliate revenue used"
          },
          "start_event_processed": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the subscription's start has been processed"
          },
          "end_event_processed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the subscription's expiration event has been triggered"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the query"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the query has been updated"
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment_interval"
            }
          },
          "stock": {
            "type": "integer",
            "example": 0,
            "description": "The stock of the subscription plan"
          },
          "price": {
            "type": "number",
            "example": 5,
            "description": "The price of the subscription plan"
          },
          "price_discount": {
            "type": "number",
            "example": 0,
            "description": "The default discount applied to this plan"
          },
          "trial_period": {
            "type": "integer",
            "enum": [0, 1],
            "example": 0,
            "description": "Whether a trial period is enabled for the subscription plan"
          },
          "recurring_interval_count": {
            "type": "integer",
            "example": 1,
            "description": "How many intervals should pass before the customer is invoiced"
          }
        }
      },
      "product_subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "example": "sub_....",
            "description": "The ID of the product subscription"
          },
          "shop_id": {
            "type": "integer",
            "example": 433811,
            "description": "The ID of the shop to which this resource belongs"
          },
          "customer_id": {
            "type": "string",
            "example": "cst_....",
            "description": "The ID of the customer who made the purchase"
          },
          "customer_email": {
            "type": "string",
            "example": "sellix_customer@gmail.com",
            "description": "The email of the customer to which the invoice was sent to"
          },
          "product_id": {
            "type": "integer",
            "example": 1277206,
            "description": "The internal ID of the product"
          },
          "product_plan_id": {
            "type": "integer",
            "example": 144,
            "description": "The internal ID of the product subscription plan" 
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "COMPLETED", "CANCELED", "AWAIT_CANCELING", "ACTIVE"],
            "example": "PENDING",
            "description": "The status of the subscription"
          },
          "credit_node_usd": {
            "type": "integer",
            "example": 0,
            "description": ""
          },
          "start_date": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730668592,
            "description": "The timestamp of the subscription start date"
          },
          "end_date": {
            "type": "integer",
            "format": "timestamp",
            "example": null,
            "description": "The timestamp of the subscription end date"
          },
          "skip_trial": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the trial period was skipped"
          },
          "skip_trial_reason": {
            "type": "string",
            "example": null,
            "description": "The reason the trial period was skipped"
          },
          "start_event_processed": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the subscription's start has been processed"
          },
          "end_event_processed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the subscription's expiration event has been triggered"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730668596,
            "description": "Timestamp for the creation of the query"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1730668596,
            "description": "Date, available if the query has been updated"
          },
          "shop_name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the shop the subscription was made for"
          },
          "product_uniqid": {
            "type": "string",
            "example": "sample....",
            "description": "The ID of the product the subscription is for"
          },
          "plan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product_plan_subscription"
            }
          }
        }
      },
      "product_variant": {
        "type": "object",
        "properties": {
          "price": { 
            "type": "number",
            "example": 60,
            "description": "The price of the product variant"
          },
          "title": { 
            "type": "string",
            "example": "exampleTitle",
            "description": "The title of the product variant"
          },
          "description": { 
            "type": "string",
            "example": "exampleDescription",
            "description": "The description of the product variant"
          },
          "price_conversions": {
            "type": "object", 
            "properties": {
              "AUD": {
                "type": "number",
                "example": 92.08,
                "description": "The price of the product variant in AUD"
              },
              "BGN": {
                "type": "number",
                "example": 108.62,
                "description": "The price of the product variant in BGN"
              },
              "BRL": {
                "type": "number",
                "example": 300.17,
                "description": "The price of the product variant in BRL"
              },
              "ZAR": {
                "type": "number",
                "example": 1143.49,
                "description": "The price of the product variant in ZAR"
              },
              "crypto": {
                "type": "object",
                "properties": {
                  "APE": {
                    "type": "string",
                    "example": "31.0607029506",
                    "description": "The price of the product variant in APE"
                  },
                  "BCH": {
                    "type": "string",
                    "example": "0.1271212408",
                    "description": "The price of the product variant in BCH"
                  },
                  "BNB": {
                    "type": "string",
                    "example": "0.1067436987",
                    "description": "The price of the product variant in BNB"
                  },
                  "USDC_NATIVE": {
                    "type": "string",
                    "example": "60.0000000000",
                    "description": "The price of the product variant in USDC_NATIVE"
                  }
                },
                "description": "A list of the price of the product variant in various cryptocurrencies"
              }
            }
          }
        },
        "description": "Product variant object"
      },
      "query": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this query belongs"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the invoice this query is linked to, if specified by the customer"
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer who created this query"
          },
          "title": {
            "type": "string",
            "example": "I need help with this product",
            "description": "Query title, brief summary of what the customer needs"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CLOSED",
              "SHOP_REPLY",
              "CUSTOMER_REPLY"
            ],
            "example": "PENDING",
            "description": "Status of the query. PENDING if the query has been created and awaits a reply from the merchant. CLOSED if the query has been closed by the merchant or the customer. SHOP_REPLY if the query has been replied by the merchant, CUSTOMER_REPLY if the query has been replied by the customer"
          },
          "day_value": {
            "type": "integer",
            "description": "Day value, number",
            "example": 1
          },
          "month": {
            "type": "string",
            "description": "First three letters of the month name",
            "example": "Jan"
          },
          "year": {
            "type": "integer",
            "description": "Year number",
            "example": 1970
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the query"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the query has been updated"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the query"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/query_message"
            }
          }
        }
      },
      "queryListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this query belongs"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the invoice this query is linked to, if specified by the customer"
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer who created this query"
          },
          "title": {
            "type": "string",
            "example": "I need help with this product",
            "description": "Query title, brief summary of what the customer needs"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CLOSED",
              "SHOP_REPLY",
              "CUSTOMER_REPLY"
            ],
            "example": "PENDING",
            "description": "Status of the query. PENDING if the query has been created and awaits a reply from the merchant. CLOSED if the query has been closed by the merchant or the customer. SHOP_REPLY if the query has been replied by the merchant, CUSTOMER_REPLY if the query has been replied by the customer"
          },
          "country": {
            "type": "string",
            "example": null,
            "description": "The country the query was made from"
          },
          "priority": {
            "type": "integer",
            "example": null,
            "description": "The priority of the support query"
          },
          "category": {
            "type": "string",
            "example": null,
            "description": "The category of the support query"
          },
          "day_value": {
            "type": "integer",
            "description": "Day value, number",
            "example": 1
          },
          "month": {
            "type": "string",
            "description": "First three letters of the month name",
            "example": "Jan"
          },
          "year": {
            "type": "integer",
            "description": "Year number",
            "example": 1070
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1710791293,
            "description": "Timestamp for the creation of the query"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 1711752964,
            "description": "Date, available if the query has been updated"
          },
          "updated_by": {
            "type": "integer",
            "example": 247994,
            "description": "User ID of the user who updated the query"
          },
          "last_message": {
            "type": "string",
            "example": "Thanks for the support",
            "description": "The last message in the support query"
          }
        }
      },
      "query_message": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "CUSTOMER",
              "SHOP"
            ],
            "example": "CUSTOMER",
            "description": "Who this message belongs to; the customer or the merchant"
          },
          "message": {
            "type": "string",
            "example": "I really need some additional details on this",
            "description": "Message left by the customer or merchant"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for when the message was sent"
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the legacy subscription",
            "example": "rec_...."
          },
          "product_subscription_id": {
            "type": "string",
            "example": null,
            "description": "ID of product subscription for subscriptions 2.0"
          },
          "shop_id": {
            "type": "integer",
            "example": 124,
            "description": "The shop ID to which this subscription belongs"
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product subscription",
            "example": "sample...."
          },
          "product_plan_id": {
            "type": "string",
            "example": null,
            "description": "ID of the subscriptions 2.0 active product plan"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the store's customer",
            "example": "cst_...."
          },
          "type": {
            "type": "string",
            "enum": ["v1", "v2"],
            "example":  "v1",
            "description": "The subscription version"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the subscription"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was last updated",
            "example": 1641315120
          },
          "status": {
            "type": "string",
            "description": "Subscription status",
            "enum": [
              "PENDING",
              "CANCELED",
              "TRIALING",
              "ACTIVE"
            ],
            "example": "CANCELED"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this subscription. A new invoice monthly will be created using this gayeway"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },
          "coupon_id": {
            "type": "string",
            "example": null,
            "description": "The ID of the coupon used when paying for the subscription. Will be null if no coupon was used"
          },
          "current_period_end": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the current billing period will end",
            "example": 1641313649
          },
          "upcoming_email_1_week_sent": {
            "type": "boolean",
            "description": "Whether or not the email for an upcoming renewal has been sent",
            "example": false
          },
          "trial_period_ending_email_sent": {
            "type": "boolean",
            "description": "Whether or not the email for the trial period expiring has been sent",
            "example": false
          },
          "renewal_invoice_created": {
            "type": "boolean",
            "description": "If true, the renewal invoice has already been created",
            "example": false
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": "PAYMENT_FAILED",
            "description": "Details about the subscription status"
          },
          "canceled_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was canceled",
            "example": null
          },
          "stripe_customer_id": {
            "type": "string",
            "description": "ID of the customer created on STRIPE",
            "example": "cus_...."
          },
          "stripe_account": {
            "type": "string",
            "description": "ID of the Stripe connected account",
            "example": "acct_...."
          },
          "stripe_subscription_id": {
            "type": "string",
            "description": "ID of the Stripe subscription",
            "example": "sub_...."
          },
          "paypal_account": {
            "type": "string",
            "example": null,
            "description": "The ID of the PayPal account used to complete the subscription payments"
          },
          "paypal_subscription_id": {
            "type": "string",
            "example": null,
            "description": "The ID of the PayPal subscription"
          },
          "product_title": {
            "type": "string",
            "description": "Digital Software",
            "example": "The title of the product for this subscription"
          },
          "product_plan_title": {
            "type": "string",
            "example": null,
            "description": "The title of the product plan for this subscription (only for type: v2)"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "customer_name": {
            "type": "string",
            "description": "Customer name",
            "example": "James"
          },
          "customer_surname": {
            "type": "string",
            "description": "Customer surname",
            "example": "Smith"
          },
          "customer_phone": {
            "type": "string",
            "description": "Customer phone",
            "example": null
          },
          "customer_phone_country_code": {
            "type": "string",
            "description": "Customer phone country code",
            "example": null
          },
          "customer_country_code": {
            "type": "string",
            "description": "Customer country code",
            "example": null
          },
          "customer_street_address": {
            "type": "string",
            "description": "Customer street address",
            "example": null
          },
          "customer_additional_address_info": {
            "type": "string",
            "description": "Customer street address additional info",
            "example": null
          },
          "customer_city": {
            "type": "string",
            "description": "Customer city",
            "example": null
          },
          "customer_postal_code": {
            "type": "string",
            "description": "Customer postal code",
            "example": null
          },
          "customer_state": {
            "type": "string",
            "description": "Customer state",
            "example": null
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email",
            "example": "sample@gmail.com"
          },
          "shop_name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the shop the subscription was made for"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/legacy_subscription_invoice"
            }
          },
          "approved_address": {
            "$ref": "#/components/schemas/approved_address"
          },
          "gateways_available": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gateway"
            },
            "example": ["STRIPE", "PAYPAL"],
            "description": "Gateways available for this invoice"
          }
        }
      },
      "legacy_subscription_invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-....-....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "recurring_billing_id": {
            "type": "string",
            "example": "rec_....",
            "description": "The Id of the legacy subscription"
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 2.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable"
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen"
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD"
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "shop_id": {
            "type": "integer",
            "example": null,
            "description": "The shop ID to which this invoice belongs"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the product linked to this invoice, if any"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page"
          },
          "paypal_apm": {
            "type": "string",
            "enum": [
              "bancontact",
              "eps",
              "trustly",
              "mercado",
              "paylater",
              "sepa",
              "venmo",
              "blik",
              "giropay",
              "ideal",
              "mybank",
              "sofort",
              "przelewy24",
              "credit"
            ],
            "example": null,
            "description": "If gateway is PAYPAL, a paypal_apm (PayPal Alternative Payment Method) can be specified. To retrieve the available PayPal APM for a specific customer session, please refer to the PayPal SDK using window.paypal.FUNDING and fundingSource to filter out available methods. You can also use our documentation on how to process white_label payments"
          },
          "stripe_apm": {
            "type": "string",
            "enum": [
              "afterpay_clearpay",
              "alipay",
              "bancontact",
              "au_becs_debit",
              "boleto",
              "eps",
              "fpx",
              "giropay",
              "grabpay",
              "ideal",
              "klarna",
              "oxxo",
              "p24",
              "sofort",
              "wechat_pay"
            ],
            "example": null,
            "description": "Stripe Alternative Payment Method name, such as iDEAL, used if gateway is STRIPE"
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice"
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock"
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 987,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the invoice"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited"
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate"
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice"
          },   
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "Whether the customer used a VPN or proxy when purchasing the subscription"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API"
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email"
          },
          "fee_billed": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not a fee was billed to the customer"
          },
          "crypto_scheduled_payout": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the payout is scheduled for the cryptocurrency"
          },
          "shop_paypal_credit_card": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not to support credit cards on PayPal"
          },
          "shop_force_paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not to deliver the product to the PayPal email address"
          },
          "paypal_fee": {
            "type": "integer",
            "example": 0,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total"
          },
          "fee_percentage": {
            "type": "integer",
            "example": 0,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees"
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number",
            "deprecated": true
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the invoice"
          }
        }
      },
      "shop_info": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "user_id": {
            "type": "integer",
            "example": 987,
            "description": "The ID of the user who requested the shop info"
          },
          "type": {
            "type": "string",
            "enum": ["DEFAULT"],
            "example": "DEFAULT",
            "description": "The type of the shop"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "The name of the shop"
          },
          "avatar": {
            "type": "string",
            "example": "45ecddc105c6717eab77e499688b608437cd0de7fa2e8ced3af65f0648c94b4b",
            "description": "The hash for the avatar"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "default_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "available_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "vat_percentage": {
            "type": "string",
            "example": "0.00",
            "description": "The VAT percentage setup for the store"
          },
          "tax_configuration": {
            "type": "string",
            "example": "NONE",
            "description": "The tax configuration for the shop"
          },
          "dashboard_feature": {
            "type": "string",
            "enum": ["API_CUSTOM", "EMBED", "PAYMENT_LINKS", "STORE", "POS", "PLUGINS", "UNSURE"],
            "example": "STORE",
            "description": "The organization mode set for the dashboard"
          },
          "display_tax_on_storefront": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "The tax percentage will be shown on the product cards of your storefront, and not on the checkout page and invoice PDF only"
          },
          "display_tax_custom_fields": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether the tax is displayed in custom fields"
          }, 
          "validation_only_for_companies": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Wheter or not VAT validation is only done for companies"
          },
          "validate_vat_number": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "If enabled, we will validate the Company VAT number to be sure it’s correct"
          },
          "prices_tax_inclusive": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not product pricing incldues the VAT"
          },
          "notify_trial_ending": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Send an email to your customers when the trial period is ending"
          },
          "notify_upcoming_renewal": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Send an email to your customers days before an upcoming renewal"
          },
          "notify_subscription_renewal_failure": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Send an email to your customers if a subscription renewal fails"
          },
          "order_emails": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop owner receives emails for orders"
          },
          "subscription_grace_period": {
            "type": "integer",
            "example": 172800,
            "description": "In days, how much time should we wait before cancelling a subscription if no payment is completed"
          },
          "paypal_credit_card": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop accepts credit cards via PayPal"
          },
          "force_paypal_email_delivery": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop delivers products to the PayPal email when the gateway is PAYPAL"
          },
          "paypal_merchant_id": {
            "type": "string",
            "example": null,
            "description": "The PayPal merchant ID of the PayPal account linked to the shop"
          },
          "binance_id": {
            "type": "string",
            "example": null,
            "description": "The Binance ID of the Binance account linked to the shop"
          },
          "walletconnect_id": {
            "type": "string",
            "example": null,
            "description": "The WalletConnect ID of the WalletConnect account linked to the shop"
          },
          "non_custodial_wallet": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop uses the Sellix non-custodial crypto wallet"
          },
          "dark_mode": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has dark mode enabled"
          },
          "discord_link": {
            "type": "string",
            "example": "https://discord.gg/example",
            "description": "The Discord server invite link for the shop"
          },
          "twitter_link": {
            "type": "string",
            "example": "https://twitter.com/example",
            "description": "The link to the shop's Twitter account"
          },
          "instagram_link": {
            "type": "string",
            "example": "https://instagram.com/example",
            "description": "The link to the shop's Instagram account"
          },
          "facebook_link": {
            "type": "string",
            "example": "https://facebook.com/example",
            "description": "The link to the shop's Facebook account"
          },
          "telegram_link": {
            "type": "string",
            "example": "https://t.me/example",
            "description": "The invite link to the shop's Telegram community"
          },
          "youtube_link": {
            "type": "string",
            "example": "https://youtube.com/example",
            "description": "The link to the shop's YouTube channel"
          },
          "reddit_link": {
            "type": "string",
            "example": "https://reddit.com/example",
            "description": "The link to the shop's SubReddit"
          },
          "tiktok_link": {
            "type": "string",
            "example": "https://tiktok.com/example",
            "description": "The link to the shop's TikTok account"
          },
          "search_enabled": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has dark mode enabled"
          },
          "sort_enabled": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has product sorting enabled"
          },
          "cart_enabled": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has the cart system enabled"
          },
          "cart_maximum_checkout": {
            "type": "string",
            "example": "10000.00",
            "description": "Set the maximum amount, in your currency, for an order made through the Shopping Cart"
          },
          "hide_out_of_stock": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Automatically hide your products when out of stock"
          },
          "google_analytics_tracking_id": {
            "type": "string",
            "example": "**Terms of Service**\r\nFollow Sellix TOS",
            "description": "The google analyticd tracking id the shop uses for analytics"
          },
          "crisp_website_id": {
            "type": "string",
            "example": null,
            "description": "The crisp website id the shop uses for analytics"
          },
          "center_product_titles": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop's theme centers product titles"
          },
          "center_group_titles": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop's theme centers group titles"
          },
          "popup_message": {
            "type": "string",
            "example": "Example Popup Message",
            "description": "This message will be shown to anyone who visits your site. Do not include your Terms of Service here"
          },
          "verified": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop is verified by Sellix"
          },
          "on_hold": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop is on hold"
          },
          "terms_of_service": {
            "type": "string",
            "example": "Terms of Service",
            "description": "The terms of service for the shop in MDX"
          },
          "primary_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The primary color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "secondary_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The secondary color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "primary_font_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The primary font color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "secondary_font_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The secondary font color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "custom_embed": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop uses a custom embed theme. Value is null if no custom theme is used"
          },
          "custom_theme": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop uses a custom storefront theme. Value is null if no custom theme is used"
          },
          "font_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The font of the shop's custom storefront theme. Value is null if no custom theme is used"
          },
          "style_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The style of the shop's custom storefront theme. Value is null if no custom theme is used"
          },
          "embed_style_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The style of the shop's custom embed theme. Value is null if no custom theme is used"
          },
          "index_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The index of the shop's active custom storefront theme. Value is null if no custom theme is used"
          },
          "product_card_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The product_card of the shop's active custom storefront theme. Value is null if no custom theme is used"
          },
          "banner_custom_theme": {
            "type": "object",
            "example": null,
            "description": "The storefront banner of the shop's custom theme. Value is null if no custom theme is used"
          },
          "footer_custom_theme": {
            "type": "object",
            "example": null,
            "description": "The storefront footer of the shop's custom theme. Value is null if no custom theme is used"
          },
          "background_image_custom_theme": {
            "type": "object",
            "example": null,
            "description": "The storefront background image of the shop's custom theme. Value is null if no custom theme is used"
          },
          "logo_custom_theme": {
            "type": "object",
            "example": null,
            "description": "The storefront logo of the shop's custom theme. Value is null if no custom theme is used"
          },
          "header_custom_theme": {
            "type": "object",
            "example": null,
            "description": "The storefront header of the shop's custom theme. Value is null if no custom theme is used"
          },
          "cards_in_row_custom_theme": {
            "type": "integer",
            "example": 4,
            "description": "The amount of cards to display in a row on the storefront"
          },
          "cards_align_custom_theme": {
            "type": "object",
            "example": null,
            "description": "Value is null if no custom theme is used"
          },
          "group_card_custom_theme": {
            "type": "object",
            "example": null,
            "description": "Value is null if no custom theme is used"
          },
          "card_animation_custom_theme": {
            "type": "object",
            "example": null,
            "description": "Value is null if no custom theme is used"
          },
          "light_font_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The light mode font color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "dark_font_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The dark mode font color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "light_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The light mode accent color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "dark_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The dark mode accent color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "border_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The border color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "button_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The button color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "thin_color_custom_theme": {
            "type": "string",
            "example": null,
            "description": "The thin font color of the shop's custom theme. Value is null if no custom theme is used"
          },
          "sort_custom_theme": {
            "type": "string",
            "enum": ["DEFAULT", "PRICE", "STOCK", "NAME", "TYPE"],
            "example": "DEFAULT",
            "description": "The default sorting method for the storefront's custom theme"
          },
          "helpspace_client_id": {
            "type": "string",
            "example": null,
            "description": "The helpspace client id of the helpspace account linked to the shop"
          },
          "helpspace_token": {
            "type": "string",
            "example": "null",
            "description": "The helpspace token of the helpspace account linked to the shop"
          },
          "description_youtube_only": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Show only youtube video for invoice/product description"
          },
          "description_skip_default_image": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Skip Default Image for Product Description"
          },
          "hide_stock_counter": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "If enabled, the number of how many products are in stock will be removed, we will only show 'In Stock' or 'Out of Stock'"
          },
          "image_width": {
            "type": "integer",
            "example": 500,
            "description": "The width of the storefront image"
          },
          "image_height": {
            "type": "integer",
            "example": 480,
            "description": "The height of the storefront image"
          },
          "default_sort": {
            "type": "string",
            "enum": ["DEFAULT", "PRICE", "STOCK", "NAME", "TYPE"],
            "example": "DEFAULT",
            "description": "The default sorting method for the storefront"
          },
          "description_image": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has a description image"
          },
          "hide_products_sold": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Hide the products sold counter on your storefront, only your average feedback will be displayed"
          },
          "service_date_from": {
            "type": "string",
            "enum": ["REGISTRATION_DATE", "FIRST_SALE"],
            "example": "REGISTRATION_DATE",
            "description": "Choose whether to display your business starting date from the day of your first sale or the day you have signed up to Sellix"
          },
          "cards_type": {
            "type": "string",
            "example": "BORDER_OUTLINE",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "setup_wizard": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has completed the setup wizzard"
          },
          "setup_cryptocurrencies": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop has setup cryptocurrencies"
          },
          "notices_banner": {
            "type": "string",
            "example": "{\"notices\": []}",
            "description": "The notices for the shop"
          },
          "affiliate_revenue_percent": {
            "type": "integer",
            "example": 10,
            "description": "The percentage of each payment given to affiliates"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the subscription"
          },
          "image_name": {
            "type": "string",
            "example": "SellixImageName.png",
            "description": "DEPRECATED: The name of the product image with the file type"
          },
          "image_storage": {
            "type": "string",
            "example": "PRODUCTS",
            "description": "Where the image is stored in Sellix's self-hosted CDN"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "marketplace_verified": {
            "type": "integer",
            "enum": [0, 1],
            "example": 1,
            "description": "Whether or not the shop is a verified marketplace"
          }
        }
      },
      "subscription_invoice_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "url",
              "uniqid"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "Sellix hosted payment page"
              },
              "uniqid": {
                "type": "string",
                "format": "uuid",
                "description": "Unique ID of the invoice created for the subscription"
              }
            },
            "example": {
              "url": "https://sellix.io/payment/sample-4caac117ca-abeb80",
              "uniqid": "sample-....-...."
            }
          },
          "error": {
            "type": "string",
            "example": null
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "env": {
            "type": "string",
            "example": "production"
          },
          "log": {
            "type": "object",
            "example": null
          }
        }
      },
      "subscription_trial_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "invoice"
            ],
            "properties": {
              "subscription_id": {
                "type": "string",
                "description": "Subscription ID"
              }
            },
            "example": {
              "subscription_id": "rec_...."
            }
          },
          "error": {
            "type": "string",
            "example": null
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "env": {
            "type": "string",
            "example": "production"
          },
          "log": {
            "type": "object",
            "example": null
          }
        }
      },
      "subscriptionListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the legacy subscription",
            "example": "rec_...."
          },
          "product_subscription_id": {
            "type": "string",
            "example": null,
            "description": "ID of product subscription for subscriptions 2.0"
          },
          "shop_id": {
            "type": "integer",
            "example": 124,
            "description": "The shop ID to which this subscription belongs"
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product subscription",
            "example": "sample...."
          },
          "product_plan_id": {
            "type": "string",
            "example": null,
            "description": "ID of the subscriptions 2.0 active product plan"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the store's customer",
            "example": "cst_...."
          },
          "type": {
            "type": "string",
            "enum": ["v1", "v2"],
            "example":  "v1",
            "description": "The subscription version"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the subscription"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was last updated",
            "example": 1641315120
          },
          "status": {
            "type": "string",
            "description": "Subscription status",
            "enum": [
              "PENDING",
              "CANCELED",
              "TRIALING",
              "ACTIVE"
            ],
            "example": "CANCELED"
          },
          "gateway": {
            "$ref": "#/components/schemas/gateway",
            "description": "Gateway chosen for this subscription. A new invoice monthly will be created using this gayeway"
          },
          "origin": {
            "type": "string",
            "enum": ["STOREFRONT", "PAYMENT_LINK", "CHECKOUT"],
            "example": "PAYMENT_LINK",
            "description": "Origin of the subscription"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields"
          },
          "coupon_id": {
            "type": "string",
            "description": "If a coupon has been applied, its ID",
            "example": null
          },
          "current_period_end": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the current billing period will end",
            "example": 1641313649
          },
          "upcoming_email_1_week_sent": {
            "type": "boolean",
            "description": "Whether or not the email for an upcoming renewal has been sent",
            "example": false
          },
          "trial_period_ending_email_sent": {
            "type": "boolean",
            "description": "Whether or not the email for the trial period expiring has been sent",
            "example": false
          },
          "renewal_invoice_created": {
            "type": "boolean",
            "description": "If true, the renewal invoice has already been created",
            "example": false
          },
          "payment_link_id": {
            "type": "string",
            "format": "uuid",
            "example": "a264f2-20c91643cc-03d088",
            "description": "The ID of the payment link used to pay the initial payment for this subscription"
          },
          "status_details": {
            "type": "string",
            "enum": ["PAYMENT_FAILED", "CART_PARTIAL_OUT_OF_STOCK"],
            "example": "PAYMENT_FAILED",
            "description": "Details about the subscription status"
          },
          "canceled_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was canceled",
            "example": null
          },
          "stripe_customer_id": {
            "type": "string",
            "description": "ID of the customer created on STRIPE",
            "example": "cus_...."
          },
          "stripe_account": {
            "type": "string",
            "description": "ID of the Stripe connected account",
            "example": "acct_...."
          },
          "stripe_subscription_id": {
            "type": "string",
            "description": "ID of the Stripe subscription",
            "example": "sub_...."
          },
          "paypal_account": {
            "type": "string",
            "example": null,
            "description": "The ID of the PayPal account used to complete the subscription payments"
          },
          "paypal_subscription_id": {
            "type": "string",
            "example": null,
            "description": "The ID of the PayPal subscription"
          },
          "product_title": {
            "type": "string",
            "description": "Digital Software",
            "example": "The title of the product for this subscription"
          },
          "product_plan_title": {
            "type": "string",
            "example": null,
            "description": "The title of the product plan for this subscription (only for type: v2)"
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "customer_name": {
            "type": "string",
            "description": "Customer name",
            "example": "James"
          },
          "customer_surname": {
            "type": "string",
            "description": "Customer surname",
            "example": "Smith"
          },
          "customer_phone": {
            "type": "string",
            "description": "Customer phone",
            "example": null
          },
          "customer_phone_country_code": {
            "type": "string",
            "description": "Customer phone country code",
            "example": null
          },
          "customer_country_code": {
            "type": "string",
            "description": "Customer country code",
            "example": null
          },
          "customer_street_address": {
            "type": "string",
            "description": "Customer street address",
            "example": null
          },
          "customer_additional_address_info": {
            "type": "string",
            "description": "Customer street address additional info",
            "example": null
          },
          "customer_city": {
            "type": "string",
            "description": "Customer city",
            "example": null
          },
          "customer_postal_code": {
            "type": "string",
            "description": "Customer postal code",
            "example": null
          },
          "customer_state": {
            "type": "string",
            "description": "Customer state",
            "example": null
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email",
            "example": "sample@gmail.com"
          }
        }
      },
      "webhook": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the webhook, used as reference across the API"
          },
          "url": {
            "type": "string",
            "example": "https://dev.sellix.io/v1/webhook",
            "description": "Webhook URL where the request has been sent"
          },
          "event": {
            "type": "string",
            "enum": [
              "order:created",
              "order:updated",
              "order:partial",
              "order:paid",
              "order:paid:product",
              "order:cancelled",
              "product:created",
              "product:stock",
              "product:edited",
              "product:dynamic",
              "query:created",
              "query:replied",
              "Feedback:received",
              "order:partial:product",
              "order:created:product",
              "order:disputed:product",
              "order:disputed",
              "order:cancelled:product",
              "order:updated:product",
              "subscription:trial:started",
              "subscription:trial:ended",
              "subscription:created",
              "subscription:updated",
              "subscription:renewed",
              "subscription:cancelled",
              "subscription:upcoming"
            ],
            "example": "order:paid",
            "description": "Webhook event type"
          },
          "retries": {
            "type": "integer",
            "example": 1,
            "description": "How many times a request has been tried"
          },
          "response_code": {
            "type": "integer",
            "example": 200,
            "description": "Webhook URL response code"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the request sent date"
          },
          "payload": {
            "type": "string",
            "example": "{\"payload\":\"example\"}",
            "description": "JSON stringified webhook payload"
          },
          "response": {
            "type": "string",
            "example": "{\"response\":\"example\"}",
            "description": "JSON stringified webhook response"
          }
        }
      },
      "whitelist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Internal ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample....",
            "description": "Unique ID of the resource, used as reference across the API"
          },
          "shop_id": {
            "type": "integer",
            "example": 987,
            "description": "The shop ID to which this whitelist belongs"
          },
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IP",
              "COUNTRY",
              "ISP",
              "ASN",
              "HOST"
            ],
            "example": "EMAIL",
            "description": "The type of data of this whitelist"
          },
          "data": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "The value of the whitelist"
          },
          "note": {
            "type": "string",
            "example": "Admitting known email",
            "description": "Additional note provided on whitelist creation"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Timestamp for the creation of the whitelist"
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the whitelist has been edited"
          },
          "updated_by": {
            "type": "integer",
            "example": 1,
            "description": "User ID of the user who updated the whitelist"
          }
        }
      }
    },
    "parameters": {
      "custom_fields": {
        "in": "query",
        "name": "custom_field_name",
        "required": false,
        "description": "The key of the custom field you want to enter. This is a placeholder. Add any amount of query parameters for custom fields you want to change/add",
        "schema": {
          "type": "string",
          "example": "custom_field_value",
          "description": "The value of the custom Field"
        },
        "style": "form",
        "explode": true
      },
      "id": {
        "in": "path",
        "name": "id",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "sample....",
        "description": "ID of the resource"
      },
      "id_or_email": {
        "in": "path",
        "name": "id_or_email",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "sample....",
        "description": "ID or email associated with the customer"
      },
      "merchant": {
        "in": "header",
        "name": "X-Sellix-Merchant",
        "schema": {
          "type": "string"
        },
        "required": false,
        "example": "Sellix",
        "description": "The name of the store to perform actions on via the API"
      },
      "page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer"
        },
        "required": false,
        "example": 1,
        "description": "If pagination is desired, the page to fetch of the response"
      },
      "version": {
        "in": "query",
        "name": "version",
        "schema": {
          "type": "string",
          "enum": ["v1", "v2"]
        },
        "required": false,
        "example": "v2",
        "description": "Specify the type(s) of subscriptions to be returned"
      },
      "uniqid": {
        "in": "path",
        "name": "uniqid",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "sample....",
        "description": "Uniqid of the resource"
      }
    },
    "responses": {
      "200": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "<success-message>"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "<error-message>"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "UNAUTHORIZED",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "Unauthorized (#003)"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "string",
                  "example": null
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NOT_FOUND",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "<resource> Not Found"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklistListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklists": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/blacklist"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklist": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklist": {
                      "$ref": "#/components/schemas/blacklist"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklistCreated": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Blacklist Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklistUpdated": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Blacklist Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklistDeleted": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Blacklist Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "category": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/category"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "categoryCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Category Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "categoryDeleted": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Category Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "categoryListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/category"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "categoryUpdated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Category Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "coupon": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "coupon": {
                      "$ref": "#/components/schemas/coupon"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "couponCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Coupon Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "couponDeleted": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Coupon Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "couponListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "coupons": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/couponListing"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "couponUpdated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "description": "The ID of the coupon",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Coupon Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customerListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customerListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customer": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customer": {
                      "$ref": "#/components/schemas/customer"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customerCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customer_id": {
                      "type": "string",
                      "example": "cst_....",
                      "description": "Customer ID"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customerCreateError": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "Email, Name and Surname are required"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customers": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customer"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customerUpdated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Customer updated"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "feedbackListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "feedback": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/feedbackListing"
                      }
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "positive": {
                          "type": "number",
                          "example": 1
                        },
                        "neutral": {
                          "type": "number",
                          "example": 0
                        },
                        "negative": {
                          "type": "number",
                          "example": 0
                        },
                        "total": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "feedback": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "feedback": {
                      "$ref": "#/components/schemas/feedback"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "feedbackReply": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Feedback Replied Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "group": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/group"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "groupCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Group Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "groupDeleted": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Group Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "groupListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/listedGroup"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "groupUpdated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Group Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invalidTitleError": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "Insert a valid Title"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoiceListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200,
                  "description": "The status of the response"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "returned_invoices": {
                      "type": "number",
                      "example": 1,
                      "description": "The total number of invoices returned"
                    },
                    "total_invoices": {
                      "type": "number",
                      "example": 5,
                      "description": "The total number of invoices on the store"
                    },
                    "total_invoices_filtered": {
                      "type": "number",
                      "example": 5,
                      "description": "The total number of invoices that matched the specified fitler"
                    },
                    "page": {
                      "type": "number",
                      "example": null,
                      "description": "The current page if pagination was specified"
                    },
                    "limit": {
                      "type": "integer",
                      "example": 25,
                      "description": "The total amount of invoices to display per page"
                    },
                    "filter": {
                      "type": "string",
                      "example": null,
                      "description": "The filter to use against the invoices"
                    },
                    "sort": {
                      "type": "string",
                      "example": null,
                      "description": "The fields to sort the invoices by"
                    },
                    "search": {
                      "type": "string",
                      "example": null,
                      "description": "The fields to search for in invoices"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [ 78 ],
                      "description": "The total amount of fields returned"
                    },
                    "time_taken_ms": {
                      "type": "number",
                      "example": 14,
                      "description": "THe amount of time, in milliseconds, it took to retrieve the orders"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/invoiceListing"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoice": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoiceReplaced": {
        "description": "invoice replaced",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Invoice Replacement Issued Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoiceUpdated": {
        "description": "invoice replaced",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "license": {
        "description": "license object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "license": {
                      "$ref": "#/components/schemas/license"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "payment": {
        "description": "payment creation response",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_response"
                },
                {
                  "$ref": "#/components/schemas/payment_response_white_label"
                }
              ]
            }
          }
        }
      },
      "paymentCompleted": {
        "description": "payment creation response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Payment Completed Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "example": null
                    },
                    "error": {
                      "type": "string",
                      "example": null
                    },
                    "message": {
                      "type": "string",
                      "example": "Invoice checkout completed"
                    },
                    "env": {
                      "type": "string",
                      "example": "production"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "paymentVoided": {
        "description": "payment creation response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Payment Voided Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "productListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/listedProduct"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "product": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/product"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "example": null
                }
              }
            }
          }
        }
      },
      "productCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "description": "The ID of the new product",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Product Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "example": null
                }
              }
            }
          }
        }
      },
      "productUpdated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "description": "The ID of the product",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Product Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "example": null
                }
              }
            }
          }
        }
      },
      "productDeleted": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Product Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "queries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/queryListing"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "query": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "$ref": "#/components/schemas/query"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryReply": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Reply Sent Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryReplyError": {
        "description": "Query Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "Message too short,"
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryClose": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Query Closed Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryReopen": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Query Reopened Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "shop": {
        "description": "shop object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "$ref": "#/components/schemas/shop_info"
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscription": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "$ref": "#/components/schemas/subscription"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscriptionInvoiceCreated": {
        "description": "subscription creation response",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription_trial_response"
                },
                {
                  "$ref": "#/components/schemas/subscription_invoice_response"
                }
              ]
            }
          }
        }
      },
      "subscriptions": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subscriptionListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "listsubscriptionsV2": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/product_subscription"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscriptionV2": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "$ref": "#/components/schemas/product_subscription"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscriptionV2Response": {
        "description": "subscription creation response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription_id": {
                      "type": "string",
                      "example": "sub_.",
                      "description": "Subscription ID"
                    }, 
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_.",
                          "description": "Subscription uniqid"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://checkout.sellix.io/subscription-v2/sub_....",
                          "description": "A URL to the object"
                        }
                      }
                    },
                    "invoice": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sample-....-....",
                          "description": "Invoice uniqid for the subscription"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://checkout.sellix.io/invoice/sample-....-....",
                          "description": "A URL to the object"
                        }
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "<success-message>"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "example": null
                }
              }
            }
          }
        }
      },
      "listSubscriptionCancelReasons": {
        "description": "subscription creation response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1,
                        "description": "ID of the resource"
                      },
                      "name": {
                        "type": "string",
                        "example": "PRICE_TOO_HIGH",
                        "description": "The name of the cancellation reason"
                      },
                      "sort": {
                        "type": "integer",
                        "example": 1,
                        "description": "The sort order of the cancellation reason"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-11-28 12:28:01",
                        "description": "Datetime for what the resource was created"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-11-28 12:28:01",
                        "description": "Datetime for what the resource was last updated"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "<success-message>"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                },
                "log": {
                  "type": "object",
                  "example": null
                }
              }
            }
          }
        }
      },
      "whitelist": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelist": {
                      "$ref": "#/components/schemas/whitelist"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelistCreated": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "uniqid": {
                      "type": "string",
                      "example": "sample...."
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Whitelist Created Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelistDeleted": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Whitelist Deleted Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelistListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelists": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/whitelist"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelistUpdated": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "Whitelist Edited Successfully"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      }
    }
  }
}
